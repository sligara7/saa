{
  "template_version": "1.0",
  "template_description": "Standard template for service_architecture.json files based on UAF definitions",
  "service_name": "Ophyd WebSocket Service",
  "service_id": "ophyd_websocket",
  "hierarchical_tier": "tier_2_components",
  "component_classification": "service",
  "purpose": "FastAPI-based WebSocket service for live device monitoring and control. Provides real-time bidirectional communication with web and Python clients for EPICS device status and control operations.",
  "dependencies": [
    "epics_ca_interface"
  ],
  "interfaces": [
    {
      "name": "WebSocket Device Interface",
      "interface_type": "message",
      "communication_pattern": "bidirectional",
      "dependency_type": "direct",
      "description": "WebSocket endpoint for real-time device monitoring and control with JSON message protocol",
      "auth_required": false,
      "version": "1.0",
      "implementation_status": "existing",
      "source_verification": "Based on actual ophyd-websocket FastAPI implementation"
    },
    {
      "name": "PV Subscription Management",
      "interface_type": "service_dependency",
      "communication_pattern": "asynchronous",
      "dependency_type": "direct",
      "description": "Manages client subscriptions to any number of PVs in a single WebSocket session",
      "auth_required": false,
      "version": "1.0",
      "implementation_status": "existing",
      "source_verification": "Based on actual PV subscription handling in ophyd-websocket"
    },
    {
      "name": "Device Status Updates",
      "interface_type": "message",
      "communication_pattern": "asynchronous",
      "dependency_type": "direct",
      "description": "Sends JSON messages to clients for value changes and device connection/disconnection events",
      "auth_required": false,
      "version": "1.0",
      "implementation_status": "existing",
      "source_verification": "Based on actual event notification system in ophyd-websocket"
    },
    {
      "name": "Device Control Operations",
      "interface_type": "service_dependency",
      "communication_pattern": "synchronous",
      "dependency_type": "direct",
      "description": "Supports monitoring and (numeric) set operations on PVs through WebSocket interface",
      "auth_required": false,
      "version": "1.0",
      "implementation_status": "existing",
      "source_verification": "Based on actual control capabilities in ophyd-websocket"
    }
  ],
  "is_external": false,
  "parent_system": "device_monitoring_service",
  "security": {
    "api_key_authentication": false,
    "ssl_tls": false,
    "additional_requirements": [
      "No authentication in current version - recommend adding for production",
      "Consider WebSocket connection limits and rate limiting",
      "Validation of PV set operations for safety"
    ]
  },
  "deployment": {
    "ansible_managed": false,
    "systemd_service": false,
    "python_uvicorn": true,
    "docker_container": false,
    "additional_info": {
      "startup_command": "Can be started with Python or Uvicorn",
      "requirements": "ophyd, pyepics, fastapi, uvicorn, numpy",
      "integration": "Designed for easy deployment alongside other Bluesky services"
    }
  },
  "performance": {
    "expected_load": "high",
    "scaling_strategy": "horizontal",
    "resource_requirements": {
      "real_time_capability": "Low latency for device status updates",
      "concurrent_connections": "Multiple simultaneous WebSocket clients",
      "memory": "PV subscription state management"
    }
  },
  "version": "1.0+2025-10-02",
  "source_references": {
    "github_repo": "",
    "documentation_links": [
      "https://fastapi.tiangolo.com/advanced/websockets/",
      "https://github.com/bluesky/ophyd"
    ],
    "analysis_date": "2025-10-02",
    "confidence_level": "high"
  },
  "implementation_status": "existing",
  "verification_notes": "Based on actual ophyd-websocket implementation with FastAPI and WebSocket support",
  "justification": {
    "rationale": "Provides essential real-time monitoring capability for scientific instrument operation",
    "standards_reference": "WebSocket protocol for real-time bidirectional communication",
    "best_practices_reference": "FastAPI framework for modern Python web services",
    "examples": "Similar to real-time monitoring systems in industrial automation",
    "trade_offs": "Real-time complexity vs. essential monitoring capabilities"
  }
}