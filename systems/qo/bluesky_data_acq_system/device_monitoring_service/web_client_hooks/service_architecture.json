{
  "template_version": "1.0",
  "template_description": "Standard template for service_architecture.json files based on UAF definitions",
  "service_name": "Web Client Hooks",
  "service_id": "web_client_hooks",
  "hierarchical_tier": "tier_2_components",
  "component_classification": "service",
  "purpose": "React client hooks (useOphydSocket.ts) and supporting types for seamless integration of device monitoring into web UIs. Provides JavaScript/TypeScript interface for WebSocket communication with ophyd-websocket service.",
  "dependencies": [
    "ophyd_websocket"
  ],
  "interfaces": [
    {
      "name": "React Hook Interface",
      "interface_type": "service_dependency",
      "communication_pattern": "bidirectional",
      "dependency_type": "direct",
      "description": "useOphydSocket React hook for WebSocket connection management and state handling",
      "auth_required": false,
      "version": "1.0",
      "implementation_status": "existing",
      "source_verification": "Based on actual React hooks implementation for ophyd-websocket"
    },
    {
      "name": "TypeScript Types",
      "interface_type": "data_contract",
      "communication_pattern": "synchronous",
      "dependency_type": "direct",
      "description": "TypeScript type definitions for device data structures and WebSocket messages",
      "auth_required": false,
      "version": "1.0",
      "implementation_status": "existing",
      "source_verification": "Based on actual TypeScript type definitions for ophyd data"
    },
    {
      "name": "WebSocket Client",
      "interface_type": "message",
      "communication_pattern": "bidirectional",
      "dependency_type": "direct",
      "description": "WebSocket client implementation for connecting to ophyd-websocket service",
      "auth_required": false,
      "version": "1.0",
      "implementation_status": "existing",
      "source_verification": "Based on actual WebSocket client in React hooks"
    },
    {
      "name": "State Management",
      "interface_type": "service_dependency",
      "communication_pattern": "asynchronous",
      "dependency_type": "direct",
      "description": "React state management for device status, PV values, and connection status",
      "auth_required": false,
      "version": "1.0",
      "implementation_status": "existing",
      "source_verification": "Based on React state management patterns in useOphydSocket"
    }
  ],
  "is_external": false,
  "parent_system": "device_monitoring_service",
  "security": {
    "api_key_authentication": false,
    "ssl_tls": false,
    "additional_requirements": [
      "Client-side validation of device operations",
      "Secure WebSocket connection handling",
      "Input validation for PV set operations"
    ]
  },
  "deployment": {
    "ansible_managed": false,
    "systemd_service": false,
    "python_uvicorn": false,
    "docker_container": false,
    "additional_info": {
      "deployment_type": "Client-side JavaScript/TypeScript library",
      "integration": "Bundled with React web applications",
      "dependencies": "React, WebSocket API"
    }
  },
  "performance": {
    "expected_load": "medium",
    "scaling_strategy": "none",
    "resource_requirements": {
      "client_side": "Browser memory for device state management",
      "real_time_updates": "Efficient rendering of live device data",
      "connection_management": "WebSocket connection lifecycle management"
    }
  },
  "version": "1.0+2025-10-02",
  "source_references": {
    "github_repo": "",
    "documentation_links": [
      "https://reactjs.org/docs/hooks-intro.html",
      "https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API"
    ],
    "analysis_date": "2025-10-02",
    "confidence_level": "high"
  },
  "implementation_status": "existing",
  "verification_notes": "Based on actual React hooks implementation for ophyd-websocket integration",
  "justification": {
    "rationale": "Provides seamless React integration for device monitoring in scientific web applications",
    "standards_reference": "React hooks pattern for stateful component logic",
    "best_practices_reference": "Separation of WebSocket communication from UI rendering logic",
    "examples": "Common pattern for real-time data integration in React applications",
    "trade_offs": "Client-side complexity vs. seamless React integration"
  }
}