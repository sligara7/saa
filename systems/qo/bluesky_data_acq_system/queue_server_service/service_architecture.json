{
  "template_version": "1.0",
  "template_description": "Standard template for service_architecture.json files based on UAF definitions",
  "service_name": "Queue Server Service",
  "service_id": "queue_server_service",
  "hierarchical_tier": "tier_1_systems",
  "component_classification": "service",
  "purpose": "Manages the experiment queue, execution pipeline, and provides secure, remote access for experiment control. Enables users to queue experiments, monitor queue status, and coordinate experiment execution.",
  "dependencies": [
    "bluesky_queueserver",
    "bluesky_httpserver",
    "nginx",
    "redis",
    "systemd_services",
    "coordination_service"
  ],
  "interfaces": [
    {
      "name": "HTTPS API for Queue Management",
      "interface_type": "http_endpoint",
      "communication_pattern": "synchronous",
      "dependency_type": "direct",
      "path": "/api/queue",
      "method": "GET",
      "description": "External HTTPS API (via nginx and bluesky-httpserver) for queue management, status, and control",
      "auth_required": true,
      "version": "1.0",
      "implementation_status": "existing",
      "source_verification": "Based on actual bluesky-httpserver implementation"
    },
    {
      "name": "Python Client Library Interface",
      "interface_type": "service_dependency",
      "communication_pattern": "synchronous",
      "dependency_type": "direct",
      "description": "Python client library (bluesky-queueserver-api) for programmatic access",
      "auth_required": true,
      "version": "1.0",
      "implementation_status": "existing",
      "source_verification": "Based on actual bluesky-queueserver-api package"
    },
    {
      "name": "Coordination Service Interface",
      "interface_type": "service_dependency",
      "communication_pattern": "synchronous",
      "dependency_type": "direct",
      "description": "Interface with coordination service to check beamline locks before executing plans",
      "auth_required": true,
      "version": "1.0",
      "implementation_status": "recommended",
      "source_verification": "Recommended solution - coordination prevents conflicts during exclusive operations"
    },
    {
      "name": "EPICS Channel Access",
      "interface_type": "service_dependency",
      "communication_pattern": "asynchronous",
      "dependency_type": "external",
      "description": "Direct EPICS/CA communication with IOCs for plan execution",
      "auth_required": false,
      "version": "1.0",
      "implementation_status": "existing",
      "source_verification": "Based on actual bluesky EPICS integration"
    }
  ],
  "is_external": false,
  "parent_system": "bluesky_data_acq_system",
  "security": {
    "api_key_authentication": true,
    "ssl_tls": true,
    "additional_requirements": [
      "Secure API key authentication for all remote access",
      "SSL/TLS encryption for all HTTP(S) endpoints",
      "Principle of least privilege for service accounts"
    ]
  },
  "deployment": {
    "ansible_managed": true,
    "systemd_service": true,
    "python_uvicorn": false,
    "docker_container": false,
    "additional_info": {
      "deployment_method": "Ansible playbooks and roles",
      "supports_installation_and_removal": true,
      "directory_setup": "Automated creation of service directories (environment, profile_collection)",
      "git_based_profiles": "Git-based deployment of experiment profiles and plans"
    }
  },
  "performance": {
    "expected_load": "medium",
    "scaling_strategy": "vertical",
    "resource_requirements": {
      "constraint": "Prevent EPICS/CA traffic through RE Worker to avoid denial-of-service scenarios"
    }
  },
  "version": "1.0+2025-10-02",
  "source_references": {
    "github_repo": "https://github.com/bluesky/bluesky-queueserver",
    "documentation_links": [
      "https://github.com/bluesky/bluesky-httpserver",
      "https://github.com/bluesky/bluesky-queueserver-api"
    ],
    "analysis_date": "2025-10-02",
    "confidence_level": "high"
  },
  "implementation_status": "existing",
  "verification_notes": "Based on actual Bluesky ecosystem components with coordination service integration recommendations",
  "justification": {
    "rationale": "Provides secure, remote experiment control while maintaining safety through coordination",
    "standards_reference": "Follows REST API patterns and microservices architecture",
    "best_practices_reference": "Separation of queue management from device control enables independent scaling",
    "examples": "Similar to distributed job queue systems with safety coordination",
    "trade_offs": "Added coordination complexity vs. safety and conflict prevention"
  }
}