{
  "template_version": "1.0",
  "template_description": "Standard template for service_architecture.json files based on UAF definitions",
  "service_name": "Lock Manager",
  "service_id": "lock_manager",
  "hierarchical_tier": "tier_2_components",
  "component_classification": "service",
  "purpose": "Manages exclusive access locks for beamline resources and experiment execution. Provides atomic lock acquisition, timeout management, and lock release operations to prevent conflicts between concurrent operations.",
  "dependencies": [],
  "interfaces": [
    {
      "name": "Lock Acquisition API",
      "interface_type": "http_endpoint",
      "communication_pattern": "synchronous",
      "dependency_type": "direct",
      "path": "/api/locks/acquire",
      "method": "POST",
      "description": "Acquire exclusive lock for beamline or device resources with timeout and user identification",
      "auth_required": true,
      "version": "1.0",
      "implementation_status": "recommended",
      "source_verification": "Recommended solution - standard pattern for distributed resource locking following semaphore design"
    },
    {
      "name": "Lock Release API",
      "interface_type": "http_endpoint",
      "communication_pattern": "synchronous",
      "dependency_type": "direct",
      "path": "/api/locks/release",
      "method": "POST",
      "description": "Release previously acquired locks with validation of lock ownership",
      "auth_required": true,
      "version": "1.0",
      "implementation_status": "recommended",
      "source_verification": "Recommended solution - essential for completing lock lifecycle management"
    },
    {
      "name": "Lock Status Query",
      "interface_type": "http_endpoint",
      "communication_pattern": "synchronous",
      "dependency_type": "direct",
      "path": "/api/locks/status",
      "method": "GET",
      "description": "Query current lock status for resources, including lock holder and expiration time",
      "auth_required": true,
      "version": "1.0",
      "implementation_status": "recommended",
      "source_verification": "Recommended solution - enables lock-aware operation by other services"
    },
    {
      "name": "Lock Timeout Management",
      "interface_type": "service_dependency",
      "communication_pattern": "asynchronous",
      "dependency_type": "direct",
      "description": "Automatic lock expiration and cleanup for abandoned or expired locks",
      "auth_required": false,
      "version": "1.0",
      "implementation_status": "recommended",
      "source_verification": "Recommended solution - prevents deadlock from abandoned locks, standard in distributed locking systems"
    }
  ],
  "is_external": false,
  "parent_system": "coordination_service",
  "security": {
    "api_key_authentication": true,
    "ssl_tls": true,
    "additional_requirements": [
      "Strong authentication for lock operations",
      "Audit logging for all lock acquisitions and releases",
      "Authorization validation for resource access"
    ]
  },
  "deployment": {
    "ansible_managed": false,
    "systemd_service": true,
    "python_uvicorn": true,
    "docker_container": false,
    "additional_info": {
      "implementation_needed": "New component requiring development",
      "suggested_framework": "FastAPI for REST API with async support",
      "persistence": "Lock state persistence for reliability across restarts"
    }
  },
  "performance": {
    "expected_load": "low",
    "scaling_strategy": "vertical",
    "resource_requirements": {
      "response_time": "Low latency for lock operations (< 100ms)",
      "consistency": "Strong consistency for lock state to prevent race conditions",
      "availability": "High availability to prevent blocking experiment execution"
    }
  },
  "version": "1.0+2025-10-02",
  "source_references": {
    "github_repo": "",
    "documentation_links": [
      "https://en.wikipedia.org/wiki/Distributed_lock_manager",
      "https://redis.io/topics/distlock"
    ],
    "analysis_date": "2025-10-02",
    "confidence_level": "medium"
  },
  "implementation_status": "recommended",
  "verification_notes": "New component recommendation based on distributed systems locking patterns and coordination requirements",
  "justification": {
    "rationale": "Essential component for safe remote operation, prevents conflicts between concurrent users and automated systems",
    "standards_reference": "Distributed locking patterns, semaphore design principles",
    "best_practices_reference": "Atomic operations, timeout mechanisms, audit trails for security-critical operations",
    "examples": "Similar to distributed lock managers in database systems and cluster computing",
    "trade_offs": "Lock management complexity vs. safety and conflict prevention in multi-user remote operations"
  }
}