{
  "uaf_version": "1.2",
  "uaf_standards": {
    "dmm": "ISO/IEC 19540-1:2022",
    "uafml": "ISO/IEC 19540-2:2022"
  },
  "service_name": "Campaign Story Engine",
  "service_id": "story_engine",
  "hierarchical_tier": "tier_3_internal_modules",
  "component_classification": "function",
  "purpose": "Manage and orchestrate campaign storylines, ensuring narrative consistency, theme coherence, and dynamic adaptation based on player choices while maintaining D&D 5e structural integrity",
  "applicable_viewpoints": [
    {
      "viewpoint": "operational",
      "concern": "Story management and adaptation",
      "key_views": ["Story Flow", "Plot Adaptation"],
      "stakeholders": ["Story Writers", "Game Designers"]
    },
    {
      "viewpoint": "services",
      "concern": "Story engine interfaces",
      "key_views": ["Story API", "Plot Management"],
      "stakeholders": ["Service Developers", "Integration Engineers"]
    },
    {
      "viewpoint": "resources",
      "concern": "Story data and persistence",
      "key_views": ["Story Graph", "State Management"],
      "stakeholders": ["Data Architects", "Storage Engineers"]
    }
  ],
  "service_resource_relationships": [
    {
      "resource_type": "Story Store",
      "relationship": "provides",
      "capability": "Story State Persistence",
      "resource_performer": "PostgreSQL 18"
    },
    {
      "resource_type": "LLM Service",
      "relationship": "consumes",
      "capability": "Plot Generation",
      "resource_performer": "AI Content Generator"
    },
    {
      "resource_type": "Rules Engine",
      "relationship": "consumes",
      "capability": "Story Validation",
      "resource_performer": "dd5e_rules_engine"
    }
  ],
  "dependencies": [
    "branch_manager",
    "plot_generator"
  ],
  "interfaces": [
    {
      "name": "manage_story_state",
      "interface_type": "http_endpoint",
      "communication_pattern": "synchronous",
      "dependency_type": "direct",
      "path": "/api/v2/campaigns/{id}/story/state",
      "method": "PUT",
      "description": "Update and manage story state with branching support",
      "auth_required": true,
      "version": "1.0",
      "implementation_status": "recommended",
      "source_verification": "Based on feature summary - Story Management",
      "information_element_flows": [
        "data_exchange",
        "control_signal",
        "status_report"
      ],
      "service_resource_relationship": "implements",
      "applicable_viewpoints": ["services", "resources"]
    },
    {
      "name": "adapt_storyline",
      "interface_type": "http_endpoint",
      "communication_pattern": "synchronous",
      "dependency_type": "direct",
      "path": "/api/v2/campaigns/{id}/story/adapt",
      "method": "POST",
      "description": "Adapt storyline based on player choices and session outcomes",
      "auth_required": true,
      "version": "1.0",
      "implementation_status": "recommended",
      "source_verification": "Based on feature summary - Story Adaptation",
      "information_element_flows": [
        "data_exchange",
        "analysis_result"
      ],
      "service_resource_relationship": "implements",
      "applicable_viewpoints": ["services", "resources"]
    },
    {
      "name": "story_events",
      "interface_type": "message",
      "communication_pattern": "asynchronous",
      "dependency_type": "indirect",
      "description": "Publish story-related events to Message Hub",
      "auth_required": true,
      "version": "1.0",
      "implementation_status": "recommended",
      "source_verification": "Based on feature summary - Event System",
      "information_element_flows": [
        "event_notification",
        "status_report"
      ],
      "service_resource_relationship": "implements",
      "applicable_viewpoints": ["services", "resources"]
    }
  ],
  "is_external": false,
  "parent_system": "campaign_management_system",
  "security": {
    "api_key_authentication": false,
    "ssl_tls": true,
    "additional_requirements": [
      "OAuth2 JWT via gateway",
      "RBAC",
      "Story state validation"
    ]
  },
  "deployment": {
    "ansible_managed": true,
    "systemd_service": false,
    "python_uvicorn": true,
    "docker_container": true,
    "additional_info": {
      "fastapi": "0.118.0",
      "python": "3.13.7"
    }
  },
  "performance": {
    "expected_load": "medium",
    "scaling_strategy": "horizontal",
    "resource_requirements": {
      "state_transition_latency": "< 100ms",
      "adaptation_latency": "< 2s"
    }
  },
  "version": "1.0+2025-10-04",
  "source_references": {
    "documentation_links": [
      "roll20.net/compendium/dnd5e/Rules:Free Basic Rules (2024)"
    ],
    "analysis_date": "2025-10-04",
    "confidence_level": "high"
  },
  "implementation_status": "recommended",
  "verification_notes": "Internal module decomposition required for complex story management",
  "justification": {
    "rationale": "Dedicated story management needed for narrative consistency",
    "standards_reference": "UAF 1.2 Level 3 decomposition triggers - complex state management",
    "best_practices_reference": "Event-driven story engine with version control",
    "trade_offs": "Added complexity balanced against narrative coherence requirements"
  }
}