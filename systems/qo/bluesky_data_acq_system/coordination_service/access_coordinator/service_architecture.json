{
  "template_version": "1.0",
  "template_description": "Standard template for service_architecture.json files based on UAF definitions",
  "service_name": "Access Coordinator",
  "service_id": "access_coordinator",
  "hierarchical_tier": "tier_2_components",
  "component_classification": "service",
  "purpose": "Mediates access between Queue Server Service and Device Monitoring Service to prevent conflicts. Coordinates with both services to ensure safe operation and maintains communication channels for coordination decisions.",
  "dependencies": [
    "lock_manager",
    "conflict_resolver"
  ],
  "interfaces": [
    {
      "name": "Queue Server Integration",
      "interface_type": "service_dependency",
      "communication_pattern": "synchronous",
      "dependency_type": "direct",
      "description": "Interface with Queue Server Service to coordinate plan execution and enforce locking during automated operations",
      "auth_required": true,
      "version": "1.0",
      "implementation_status": "recommended",
      "source_verification": "Recommended solution - prevents conflicts during plan execution"
    },
    {
      "name": "Device Monitoring Integration",
      "interface_type": "service_dependency",
      "communication_pattern": "synchronous",
      "dependency_type": "direct",
      "description": "Interface with Device Monitoring Service to block manual device commands when beamline is locked for exclusive operations",
      "auth_required": true,
      "version": "1.0",
      "implementation_status": "recommended",
      "source_verification": "Recommended solution - prevents manual interference during automated scans"
    },
    {
      "name": "Coordination Status API",
      "interface_type": "http_endpoint",
      "communication_pattern": "synchronous",
      "dependency_type": "direct",
      "path": "/api/coordination/status",
      "method": "GET",
      "description": "Provides current coordination status and active restrictions to other services",
      "auth_required": true,
      "version": "1.0",
      "implementation_status": "recommended",
      "source_verification": "Recommended solution - enables services to check coordination state before operations"
    },
    {
      "name": "Service Registration",
      "interface_type": "service_dependency",
      "communication_pattern": "synchronous",
      "dependency_type": "direct",
      "description": "Registration and health monitoring of coordinated services for reliable communication",
      "auth_required": true,
      "version": "1.0",
      "implementation_status": "recommended",
      "source_verification": "Recommended solution - service discovery pattern for reliable coordination"
    }
  ],
  "is_external": false,
  "parent_system": "coordination_service",
  "security": {
    "api_key_authentication": true,
    "ssl_tls": true,
    "additional_requirements": [
      "Mutual authentication with coordinated services",
      "Secure service registration and discovery",
      "Audit logging for all coordination decisions"
    ]
  },
  "deployment": {
    "ansible_managed": false,
    "systemd_service": true,
    "python_uvicorn": true,
    "docker_container": false,
    "additional_info": {
      "implementation_needed": "New component requiring development",
      "integration_points": "Direct communication with Queue Server and Device Monitoring services",
      "health_monitoring": "Service health checks and failure detection"
    }
  },
  "performance": {
    "expected_load": "medium",
    "scaling_strategy": "vertical",
    "resource_requirements": {
      "coordination_latency": "Low latency for coordination decisions to prevent operation delays",
      "service_monitoring": "Continuous monitoring of coordinated service health",
      "communication_reliability": "Reliable communication channels with all coordinated services"
    }
  },
  "version": "1.0+2025-10-02",
  "source_references": {
    "github_repo": "",
    "documentation_links": [
      "https://microservices.io/patterns/service-registry.html",
      "https://en.wikipedia.org/wiki/Service_discovery"
    ],
    "analysis_date": "2025-10-02",
    "confidence_level": "medium"
  },
  "implementation_status": "recommended",
  "verification_notes": "New component recommendation based on service coordination patterns and inter-service communication requirements",
  "justification": {
    "rationale": "Central coordination point enabling safe interaction between independent services while maintaining separation of concerns",
    "standards_reference": "Service coordination patterns, mediator pattern",
    "best_practices_reference": "Service registry and discovery, health monitoring for distributed systems",
    "examples": "Similar to service mesh coordination and microservices communication patterns",
    "trade_offs": "Central coordination point vs. distributed coordination complexity"
  }
}