version: '3.8'

services:
  # API Gateway (Traefik)
  traefik:
    image: traefik:v2.9
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.directory=/etc/traefik/dynamic"
      - "--providers.file.watch=true"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/podman.sock:/var/run/docker.sock:ro
      - ./api_gateway/config:/etc/traefik
    networks:
      - dnd_network

  # Message Hub
  message-hub:
    build: 
      context: ./message_hub
      dockerfile: Dockerfile
    depends_on:
      - message-hub-db
      - message-hub-redis
      - rabbitmq
    environment:
      - DATABASE_URL=postgresql://message:secret@message-hub-db:5432/message_hub
      - REDIS_URL=redis://message-hub-redis:6379
      - RABBITMQ_URL=amqp://user:password@rabbitmq:5672
      - SECRET_KEY=${SECRET_KEY}
      - LOG_LEVEL=INFO
    ports:
      - "8200:8000"
    volumes:
      - ./message_hub:/app/src
    networks:
      - dnd_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.message-hub.rule=PathPrefix(`/api/v1/messages`)"
      - "traefik.http.services.message-hub.loadbalancer.server.port=8000"

  # Character Service
  character-service:
    build: 
      context: ./character_service
      dockerfile: Dockerfile
    depends_on:
      - character-db
      - message-hub
    environment:
      - DATABASE_URL=postgresql://character:secret@character-db:5432/character_service
      - MESSAGE_HUB_URL=http://message-hub:8000
      - SECRET_KEY=${SECRET_KEY}
      - LOG_LEVEL=INFO
    ports:
      - "8000:8000"
    volumes:
      - ./character_service:/app/src
    networks:
      - dnd_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.character.rule=PathPrefix(`/api/v1/characters`)"
      - "traefik.http.services.character.loadbalancer.server.port=8000"

  # Campaign Service
  campaign-service:
    build:
      context: ./campaign_service
      dockerfile: Dockerfile
    depends_on:
      - campaign-db
      - message-hub
    environment:
      - DATABASE_URL=postgresql://campaign:secret@campaign-db:5432/campaign_service
      - MESSAGE_HUB_URL=http://message-hub:8000
      - SECRET_KEY=${SECRET_KEY}
      - LOG_LEVEL=INFO
    ports:
      - "8001:8000"
    volumes:
      - ./campaign_service:/app/src
    networks:
      - dnd_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.campaign.rule=PathPrefix(`/api/v1/campaigns`)"
      - "traefik.http.services.campaign.loadbalancer.server.port=8000"

  # Image Service
  image-service:
    build: 
      context: ./image_service
      dockerfile: Dockerfile
    depends_on:
      - image-db
      - message-hub
      - minio
    environment:
      - DATABASE_URL=postgresql://image:secret@image-db:5432/image_service
      - STORAGE_URL=http://minio:9000
      - STORAGE_ACCESS_KEY=minioadmin
      - STORAGE_SECRET_KEY=minioadmin
      - STORAGE_BUCKET=image-service
      - MESSAGE_HUB_URL=http://message-hub:8000
      - SECRET_KEY=${SECRET_KEY}
      - LOG_LEVEL=INFO
    ports:
      - "8002:8000"
    volumes:
      - ./image_service:/app/src
      - stable-diffusion-models:/app/models
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [gpu]
    networks:
      - dnd_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.image.rule=PathPrefix(`/api/v1/images`)"
      - "traefik.http.services.image.loadbalancer.server.port=8000"

  # LLM Service
  llm-service:
    build: 
      context: ./llm_service
      dockerfile: Dockerfile
    depends_on:
      - llm-db
      - llm-redis
      - message-hub
    environment:
      - DATABASE_URL=postgresql://llm:secret@llm-db:5432/llm_service
      - REDIS_URL=redis://llm-redis:6379
      - MESSAGE_HUB_URL=http://message-hub:8000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - LOG_LEVEL=INFO
    ports:
      - "8100:8000"
    volumes:
      - ./llm_service:/app/src
      - ./llm_service/prompts:/app/prompts
    networks:
      - dnd_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.llm.rule=PathPrefix(`/api/v1/generate`)"
      - "traefik.http.services.llm.loadbalancer.server.port=8000"

  # Databases
  character-db:
    image: postgres:13
    environment:
      - POSTGRES_USER=character
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=character_service
    volumes:
      - character-data:/var/lib/postgresql/data
    networks:
      - dnd_network

  campaign-db:
    image: postgres:13
    environment:
      - POSTGRES_USER=campaign
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=campaign_service
    volumes:
      - campaign-data:/var/lib/postgresql/data
    networks:
      - dnd_network

  image-db:
    image: postgres:13
    environment:
      - POSTGRES_USER=image
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=image_service
    volumes:
      - image-data:/var/lib/postgresql/data
    networks:
      - dnd_network

  llm-db:
    image: postgres:13
    environment:
      - POSTGRES_USER=llm
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=llm_service
    volumes:
      - llm-data:/var/lib/postgresql/data
    networks:
      - dnd_network

  message-hub-db:
    image: postgres:13
    environment:
      - POSTGRES_USER=message
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=message_hub
    volumes:
      - message-hub-data:/var/lib/postgresql/data
    networks:
      - dnd_network

  # Redis instances
  llm-redis:
    image: redis:6
    command: redis-server --appendonly yes
    volumes:
      - llm-redis-data:/data
    networks:
      - dnd_network

  message-hub-redis:
    image: redis:6
    command: redis-server --appendonly yes
    volumes:
      - message-hub-redis-data:/data
    networks:
      - dnd_network

  # RabbitMQ for Message Hub
  rabbitmq:
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=user
      - RABBITMQ_DEFAULT_PASS=password
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - dnd_network

  # MinIO for Image Service
  minio:
    image: minio/minio
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    networks:
      - dnd_network

networks:
  dnd_network:
    driver: bridge

volumes:
  character-data:
  campaign-data:
  image-data:
  llm-data:
  message-hub-data:
  llm-redis-data:
  message-hub-redis-data:
  rabbitmq-data:
  minio-data:
  stable-diffusion-models: