{
  "template_version": "1.0",
  "template_description": "Standard template for service_architecture.json files based on UAF definitions",
  "service_name": "EPICS Channel Access Interface",
  "service_id": "epics_ca_interface",
  "hierarchical_tier": "tier_2_components",
  "component_classification": "interface_protocol",
  "purpose": "EPICS Channel Access protocol interface for communication with IOCs and scientific instruments. Provides the fundamental communication layer between Bluesky services and EPICS-based device control systems.",
  "dependencies": [
    "epics_iocs"
  ],
  "interfaces": [
    {
      "name": "EPICS CA Protocol",
      "interface_type": "service_dependency",
      "communication_pattern": "asynchronous",
      "dependency_type": "external",
      "description": "EPICS Channel Access protocol for device communication using pyepics/ophyd libraries",
      "auth_required": false,
      "version": "1.0",
      "implementation_status": "existing",
      "source_verification": "Based on actual EPICS CA implementation in pyepics and ophyd"
    },
    {
      "name": "PV Read Operations",
      "interface_type": "data_contract",
      "communication_pattern": "synchronous",
      "dependency_type": "external",
      "description": "Read process variable values from EPICS IOCs",
      "auth_required": false,
      "version": "1.0",
      "implementation_status": "existing",
      "source_verification": "Based on standard EPICS CA read operations"
    },
    {
      "name": "PV Write Operations",
      "interface_type": "data_contract",
      "communication_pattern": "synchronous",
      "dependency_type": "external",
      "description": "Write/set process variable values to EPICS IOCs",
      "auth_required": false,
      "version": "1.0",
      "implementation_status": "existing",
      "source_verification": "Based on standard EPICS CA write operations"
    },
    {
      "name": "PV Monitoring",
      "interface_type": "message",
      "communication_pattern": "asynchronous",
      "dependency_type": "external",
      "description": "Subscribe to PV value changes and connection status updates from IOCs",
      "auth_required": false,
      "version": "1.0",
      "implementation_status": "existing",
      "source_verification": "Based on EPICS CA monitor/subscription capabilities"
    }
  ],
  "is_external": true,
  "parent_system": "device_monitoring_service",
  "security": {
    "api_key_authentication": false,
    "ssl_tls": false,
    "additional_requirements": [
      "EPICS CA security configuration",
      "Network access control to IOC subnets",
      "PV access control lists where needed"
    ]
  },
  "deployment": {
    "ansible_managed": false,
    "systemd_service": false,
    "python_uvicorn": false,
    "docker_container": false,
    "additional_info": {
      "protocol": "EPICS Channel Access over UDP/TCP",
      "libraries": "pyepics, ophyd for Python integration",
      "network_configuration": "EPICS_CA_ADDR_LIST and related environment variables"
    }
  },
  "performance": {
    "expected_load": "high",
    "scaling_strategy": "none",
    "resource_requirements": {
      "network_bandwidth": "Real-time PV updates and monitoring traffic",
      "latency": "Low latency for device control operations",
      "reliability": "High reliability for safety-critical device operations"
    }
  },
  "version": "1.0+2025-10-02",
  "source_references": {
    "github_repo": "",
    "documentation_links": [
      "https://epics.anl.gov/docs/ChannelAccess.html",
      "https://github.com/pyepics/pyepics",
      "https://github.com/bluesky/ophyd"
    ],
    "analysis_date": "2025-10-02",
    "confidence_level": "high"
  },
  "implementation_status": "existing",
  "verification_notes": "Based on established EPICS Channel Access protocol and Python library implementations",
  "justification": {
    "rationale": "Standard protocol interface for scientific instrument control in EPICS-based facilities",
    "standards_reference": "EPICS Channel Access - industry standard for experimental physics control systems",
    "best_practices_reference": "Separation of protocol interface from application logic",
    "examples": "Widely used in synchrotron facilities, particle accelerators, and scientific experiments",
    "trade_offs": "Protocol complexity vs. robust, standardized device communication"
  }
}