{
  "version": "1.0",
  "system_name": "D&D Campaign Management System",
  "architectural_goals": {
    "narrative_consistency": {
      "description": "Maintain coherent storytelling across all branches and adaptations",
      "constraints": [
        "All story state changes must be validated against D&D 5e rules",
        "Theme consistency must be maintained across generated content",
        "Branch merges must preserve narrative causality"
      ],
      "validation": "Required validation against dd5e_rules_engine for all state changes"
    },
    "version_control": {
      "description": "Git-like version control for campaign narratives",
      "constraints": [
        "All state changes must be tracked in branches",
        "Support for parallel story development",
        "Conflict resolution for divergent narratives"
      ],
      "validation": "Branch manager must be source of truth for all state changes"
    },
    "ai_integration": {
      "description": "AI/LLM-driven plot generation and adaptation",
      "constraints": [
        "Generated content must follow D&D themes and mechanics",
        "AI suggestions must be validated before state changes",
        "Content generation must be deterministic when needed"
      ],
      "validation": "All AI-generated content must pass theme_analyzer checks"
    }
  },
  "system_constraints": {
    "performance": {
      "latency": {
        "story_state_updates": "< 500ms",
        "plot_generation": "< 5s",
        "branch_operations": "< 1s"
      },
      "throughput": {
        "concurrent_campaigns": "50 per deployment",
        "state_updates_per_second": "100",
        "content_generations_per_minute": "30"
      }
    },
    "scalability": {
      "horizontal_scaling": {
        "required": true,
        "min_instances": 2,
        "max_instances": 10
      },
      "data_volume": {
        "max_branches_per_campaign": 50,
        "max_active_campaigns": 1000,
        "max_story_state_size": "10MB"
      }
    },
    "security": {
      "authentication": {
        "required": true,
        "mechanism": "OAuth2 JWT",
        "token_lifetime": "8h"
      },
      "authorization": {
        "required": true,
        "mechanism": "RBAC",
        "roles": ["game_master", "player", "admin"]
      },
      "data_protection": {
        "encryption_at_rest": true,
        "encryption_in_transit": true,
        "backup_required": true
      }
    },
    "reliability": {
      "availability": {
        "target": "99.9%",
        "max_planned_downtime": "4h/month"
      },
      "data_consistency": {
        "state_updates": "strongly consistent",
        "event_publishing": "eventually consistent"
      },
      "backup_recovery": {
        "backup_frequency": "1h",
        "max_recovery_time": "1h"
      }
    }
  },
  "deployment_constraints": {
    "infrastructure": {
      "containerization": {
        "required": true,
        "platform": "Docker",
        "orchestration": "Kubernetes"
      },
      "service_mesh": {
        "required": true,
        "features": ["service discovery", "load balancing", "circuit breaking"]
      }
    },
    "networking": {
      "api_gateway": {
        "required": true,
        "features": ["rate limiting", "request validation", "auth enforcement"]
      },
      "communication": {
        "internal": "gRPC",
        "external": "REST/HTTP",
        "events": "Apache Kafka"
      }
    },
    "monitoring": {
      "metrics": {
        "required": true,
        "type": "Prometheus",
        "retention": "30d"
      },
      "logging": {
        "required": true,
        "centralization": "ELK Stack",
        "retention": "90d"
      },
      "tracing": {
        "required": true,
        "implementation": "OpenTelemetry",
        "sampling_rate": 0.1
      }
    }
  },
  "integration_constraints": {
    "internal_communication": {
      "patterns": {
        "synchronous": "HTTP/gRPC with circuit breakers",
        "asynchronous": "Event-driven via Message Hub"
      },
      "contracts": {
        "format": "OpenAPI 3.0",
        "versioning": "Semantic versioning required"
      }
    },
    "external_systems": {
      "authentication": {
        "provider": "OAuth2 compatible",
        "token_validation": "Required at gateway"
      },
      "ai_services": {
        "content_generation": "Standardized prompt format",
        "response_validation": "Required before acceptance"
      }
    },
    "data_storage": {
      "service_isolation": {
        "required": true,
        "mechanism": "Separate databases per service"
      },
      "caching": {
        "required": true,
        "implementation": "Redis",
        "invalidation": "Event-based"
      }
    }
  }
}