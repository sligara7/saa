{
  "metadata": {
    "version": "2.0",
    "framework": "UAF 1.2",
    "framework_standard": "ISO/IEC 19540-1:2022 and ISO/IEC 19540-2:2022",
    "description": "Architectural definitions for LLM-driven system decomposition based on Unified Architecture Framework (UAF) version 1.2",
    "purpose": "Standardized terminology for service_architecture.json generation and system analysis aligned with UAF 1.2 Domain Metamodel (DMM) and UAF Modeling Language (UAFML)",
    "last_updated": "2025-01",
    "uaf_components": {
      "dmm": "Domain Metamodel (DMM) - Part 1: Formal metamodel with VIEW specifications",
      "uafml": "UAF Modeling Language (UAFML) - Part 2: UML/SysML implementation",
      "appendices": ["Traceability", "Sample Problem", "Enterprise Architecture Guide"]
    }
  },
  "core_concepts": {
    "service": {
      "definition": "Black-box functionality or capability exposed to external consumers",
      "characteristics": [
        "Encapsulates internal implementation details",
        "Provides specific capabilities through well-defined interfaces",
        "Can be composed of multiple internal components/functions",
        "Has clear boundaries and responsibilities"
      ],
      "uaf_reference": "ServiceFunction and ServiceInterface specifications from UAF 1.2 DMM with enhanced Service-Resource relationships",
      "examples": [
        "Queue Server Service",
        "Device Monitoring Service", 
        "Coordination Service",
        "Authentication Service"
      ]
    },
    "interface": {
      "definition": "Boundary specification for data exchange and communication between services",
      "characteristics": [
        "Defines data transport mechanisms and protocols",
        "Specifies communication patterns (request/response, publish/subscribe, etc.)",
        "Enables but does not perform data transformations",
        "External boundaries for system integration"
      ],
      "uaf_reference": "ServiceInterface and ResourceServiceInterface contracts from UAF 1.2 with enhanced Service-to-Resource connectivity and Information Element flows",
      "examples": [
        "REST API",
        "WebSocket connection",
        "EPICS Channel Access protocol",
        "Redis pub/sub interface",
        "HTTP/HTTPS endpoints"
      ]
    },
    "function": {
      "definition": "Internal behavior or operation within a service that transforms inputs to outputs",
      "characteristics": [
        "Internal implementation details",
        "Performs specific computational or business logic",
        "May not be directly exposed to external consumers",
        "Part of service's internal architecture"
      ],
      "uaf_reference": "OperationalActivity and ResourceFunction specifications from UAF 1.2 DMM with enhanced activity-resource performer relationships",
      "examples": [
        "Data validation logic",
        "Queue processing algorithm",
        "Device state monitoring",
        "Message routing function"
      ]
    },
    "system": {
      "definition": "Integrated set of elements (hardware, software, processes, people) accomplishing specific objectives",
      "characteristics": [
        "Contains multiple interconnected services",
        "Has defined boundaries and interfaces with other systems",
        "Provides capabilities through service composition",
        "May be part of larger system-of-systems"
      ],
      "uaf_reference": "ResourcePerformer, System, and Capability specifications from UAF 1.2 DMM with enhanced System-of-Systems composition patterns",
      "examples": [
        "Bluesky Data Acquisition System",
        "Device Control System",
        "Data Processing System"
      ]
    },
    "system_of_systems": {
      "definition": "Federation of independent systems that together provide capabilities not available from individual systems",
      "characteristics": [
        "Composed of multiple independent systems",
        "Exhibits emergent properties and capabilities",
        "Systems can operate independently but provide enhanced value when integrated",
        "Requires careful interface management and governance"
      ],
      "uaf_reference": "System-of-Systems patterns via ResourcePerformer composition and Capability aggregation from UAF 1.2 with enhanced emergent property modeling",
      "examples": [
        "Laboratory Automation Ecosystem",
        "Integrated Scientific Facility",
        "Multi-beamline Experimental Setup"
      ]
    }
  },
  "hierarchical_structure": {
    "description": "Four-tier hierarchy for systematic decomposition with conditional deeper analysis",
    "uaf_reference": "UAF 1.2 Grid-based Viewpoint x Aspect matrix with 11 Viewpoints: Architecture Management, Summary and Overview, Strategic, Operational, Services, Personnel, Resources, Security, Project, Standards, and Actual Resources",
    "tiers": {
      "tier_0": {
        "name": "System of Systems / Enterprise",
        "description": "Highest level federation of multiple independent systems",
        "characteristics": [
          "Strategic and operational integration",
          "Cross-system governance and policies",
          "Emergent capabilities from system federation",
          "Enterprise-wide objectives"
        ],
        "examples": [
          "Laboratory Information Management Ecosystem",
          "Beamline Operations Enterprise"
        ]
      },
      "tier_1": {
        "name": "Systems / Major Services",
        "description": "Independent systems that can operate standalone but integrate for enhanced capability",
        "characteristics": [
          "Well-defined system boundaries",
          "Independent operational capability",
          "Clear interfaces with other systems",
          "Specific domain responsibilities"
        ],
        "examples": [
          "Queue Server System",
          "Device Monitoring System",
          "Data Acquisition System"
        ]
      },
      "tier_2": {
        "name": "Components / Sub-services",
        "description": "Individual services and components within a system",
        "characteristics": [
          "Focused functional responsibility",
          "May depend on other components within the system",
          "Provide specific capabilities to the parent system",
          "Implementation-level services"
        ],
        "examples": [
          "bluesky-queueserver",
          "nginx",
          "redis",
          "web-client"
        ]
      },
      "tier_3": {
        "name": "Internal Modules / Implementation Details",
        "description": "Classes, methods, and functions within components (conditional decomposition)",
        "characteristics": [
          "Specific implementation details for complex interfaces",
          "Provides precise guidance for development teams",
          "Created only when interface implementation is unclear",
          "Enables exact integration specifications"
        ],
        "examples": [
          "coordination_service.LockManager",
          "ophyd_websocket.DeviceManager",
          "bluesky_queueserver.PlanExecutor"
        ]
      }
    },
    "decomposition_rules": {
      "two_level_rule": {
        "description": "Standard decomposition should proceed exactly two levels deep",
        "rationale": "Provides optimal balance between detail and comprehensibility",
        "application": "System → Services → Components/Packages"
      },
      "conditional_deeper_decomposition": {
        "description": "Go to Level 3 when interface implementation details are unclear",
        "trigger_conditions": [
          "Interface between components requires specific method calls",
          "Integration points need exact implementation guidance",
          "Source code analysis reveals complex internal interactions",
          "Development teams need precise specifications"
        ],
        "application": "Components → Internal Modules → Classes/Methods"
      },
      "granularity_guidelines": {
        "too_shallow": "Single monolithic service representing entire system",
        "appropriate": "5-15 distinct components with clear responsibilities",
        "too_deep": "Every function or class as separate service (unless interface complexity requires it)"
      }
    }
  },
  "communication_patterns": {
    "synchronous": {
      "description": "Request-response communication where caller waits for response",
      "protocols": ["HTTP/REST", "RPC", "Direct function calls"],
      "use_cases": ["API queries", "Configuration requests", "Status checks"]
    },
    "asynchronous": {
      "description": "Fire-and-forget or publish-subscribe communication",
      "protocols": ["WebSockets", "Message queues", "Event streams", "Redis pub/sub"],
      "use_cases": ["Real-time notifications", "Event broadcasting", "Long-running operations"]
    },
    "bidirectional": {
      "description": "Two-way communication where both parties can initiate exchanges",
      "protocols": ["WebSockets", "TCP connections", "Peer-to-peer protocols"],
      "use_cases": ["Real-time collaboration", "Interactive sessions", "Monitoring streams"]
    }
  },
  "dependency_types": {
    "direct": {
      "description": "Component directly communicates with another component",
      "representation": "Direct edge in architecture graph",
      "examples": ["web-client → nginx", "queueserver → redis"]
    },
    "indirect": {
      "description": "Communication mediated through intermediary service",
      "representation": "Path through intermediary in architecture graph", 
      "examples": ["web-client → nginx → bluesky-httpserver"]
    },
    "external": {
      "description": "Dependency on service outside the current system boundary",
      "representation": "External node or dotted edge",
      "examples": ["EPICS IOCs", "Instrument hardware", "Authentication providers"]
    }
  },
  "validation_criteria": {
    "service_boundaries": {
      "clear_responsibility": "Each service has well-defined, non-overlapping responsibilities",
      "appropriate_granularity": "Services are neither too fine-grained nor too coarse",
      "independence": "Services can be developed, deployed, and scaled independently where appropriate"
    },
    "interface_specifications": {
      "protocol_clarity": "Communication protocols are clearly specified",
      "data_format": "Data exchange formats are documented",
      "error_handling": "Error conditions and recovery mechanisms are defined"
    },
    "dependency_management": {
      "acyclic_dependencies": "No circular dependencies between services",
      "minimal_coupling": "Services have minimal necessary dependencies",
      "loose_coupling": "Dependencies are through well-defined interfaces"
    }
  },
  "uaf_1_2_enhancements": {
    "iso_standardization": "Published as ISO/IEC 19540-1:2022 (DMM) and ISO/IEC 19540-2:2022 (UAFML) international standards",
    "enhanced_metamodel": "Refined Domain Metamodel (DMM) with improved Service-Resource relationships and Information Element flows",
    "viewpoint_refinements": "Enhanced 11-viewpoint grid with improved Architecture Management, Security, and Actual Resources viewpoints",
    "sysml_v2_alignment": "Updated alignment with SysML v2 for advanced Model-Based Systems Engineering (MBSE)",
    "ideas_ontology_update": "Enhanced IDEAS Foundation Ontology integration with improved four-dimensional modeling (temporal and spatial)",
    "parametric_analysis": "Advanced parametric analysis capabilities through SysML integration for trade-off studies",
    "enterprise_architecture": "Comprehensive Enterprise Architecture Guide (Appendix C) for commercial and government applications",
    "traceability_framework": "Enhanced traceability specifications (Appendix A) for requirements and design element tracking",
    "digital_transformation": "Specific guidance for Digital Transformation initiatives and Cyber-physical Systems engineering"
  },
  "uaf_1_2_viewpoint_grid": {
    "description": "UAF 1.2 eleven-viewpoint architecture framework organized as stakeholder concerns (rows) vs architectural aspects (columns)",
    "viewpoints": {
      "architecture_management": {
        "concern": "Architecture governance, standards compliance, and configuration management",
        "key_views": ["Architecture Timeline", "Architecture Versions", "Standards Profile"],
        "stakeholders": ["Architecture Review Board", "Configuration Managers", "Standards Bodies"]
      },
      "summary_overview": {
        "concern": "Executive-level architecture summaries and high-level system context",
        "key_views": ["Architecture Overview", "Capability Summary", "High-Level Operational Concept"],
        "stakeholders": ["Executives", "Program Managers", "Senior Leadership"]
      },
      "strategic": {
        "concern": "Strategic goals, capabilities, and long-term architectural vision",
        "key_views": ["Capability Vision", "Strategic Dependencies", "Capability Roadmap"],
        "stakeholders": ["Strategic Planners", "Enterprise Architects", "Business Leaders"]
      },
      "operational": {
        "concern": "Operational activities, workflows, and behavioral specifications",
        "key_views": ["Operational Activity Model", "Operational State Model", "Operational Event-Trace"],
        "stakeholders": ["Operations Personnel", "Process Analysts", "Domain Experts"]
      },
      "services": {
        "concern": "Service specifications, interfaces, and service-oriented architecture",
        "key_views": ["Service Interface", "Service Function", "Service Interaction"],
        "stakeholders": ["Service Architects", "Integration Engineers", "API Designers"]
      },
      "personnel": {
        "concern": "Human resources, roles, responsibilities, and organizational structure",
        "key_views": ["Personnel Role", "Personnel Event-Trace", "Personnel State"],
        "stakeholders": ["Human Resources", "Training Personnel", "Organizational Leaders"]
      },
      "resources": {
        "concern": "Physical and logical resources, systems, and resource relationships",
        "key_views": ["Resource Structure", "Resource Connectivity", "Resource Interface"],
        "stakeholders": ["Systems Engineers", "Infrastructure Architects", "Resource Managers"]
      },
      "security": {
        "concern": "Security policies, constraints, and security-related architecture elements",
        "key_views": ["Security Constraint", "Security Policy", "Security Architecture"],
        "stakeholders": ["Security Officers", "Risk Managers", "Compliance Teams"]
      },
      "project": {
        "concern": "Project timelines, milestones, and implementation planning",
        "key_views": ["Project Timeline", "Project Dependencies", "Implementation Roadmap"],
        "stakeholders": ["Project Managers", "Implementation Teams", "Delivery Managers"]
      },
      "standards": {
        "concern": "Technical standards, protocols, and compliance requirements",
        "key_views": ["Standards Profile", "Protocol Specification", "Compliance Matrix"],
        "stakeholders": ["Standards Bodies", "Technical Writers", "Compliance Officers"]
      },
      "actual_resources": {
        "concern": "Deployed, configured, and operational resource instances",
        "key_views": ["Actual Resource Structure", "Deployed Configuration", "Operational Status"],
        "stakeholders": ["Operations Teams", "System Administrators", "Maintenance Personnel"]
      }
    }
  },
  "llm_agent_guidance": {
    "uaf_1_2_alignment": "Apply UAF 1.2 Domain Metamodel concepts for precise architectural element classification",
    "viewpoint_selection": "Select appropriate UAF 1.2 viewpoints based on stakeholder concerns and analysis objectives",
    "service_identification": "Use UAF 1.2 ServiceFunction and ServiceInterface specifications for service boundary definition",
    "resource_modeling": "Apply ResourcePerformer and System concepts for comprehensive resource architecture",
    "interface_specification": "Leverage enhanced ServiceInterface and ResourceServiceInterface patterns for connectivity modeling",
    "hierarchy_construction": "Apply Two-Level Rule with UAF 1.2 recursive composition patterns for consistent decomposition depth",
    "traceability_implementation": "Use UAF 1.2 traceability framework for requirements-to-design element mapping",
    "validation_approach": "Cross-reference against UAF 1.2 View Specifications and deployment artifacts",
    "documentation_standards": "Generate UAF 1.2 compliant architectural descriptions with proper viewpoint coverage",
    "parametric_analysis": "Leverage SysML integration for trade-off studies and parametric design optimization"
  }
}