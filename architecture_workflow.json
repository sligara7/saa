{
  "workflow_metadata": {
    "version": "2.0.0",
    "description": "LLM-executable system architecture workflow with automated context management",
    "last_updated": "2025-10-08",
    "based_on": "UAF 1.2 architecture framework"
  },
  
  "context_management": {
    "refresh_triggers": {
      "operation_count": 4,
      "time_minutes": 12,
      "step_transition": true,
      "substep_transition": true,
      "degradation_detected": true
    },
    "validation_before_every_operation": [
      "READ: systems/<system_name>/current_focus.md",
      "READ: systems/<system_name>/step_progress_tracker.json",
      "CHECK: operations_since_refresh <= 4",
      "VERIFY: system_name, current_step, current_substep"
    ],
    "refresh_sequence": [
      "PAUSE: Stop all operations",
      "SAVE: Update step_progress_tracker.json and working_memory.json",
      "RELOAD: /definitions/architectural_definitions.json",
      "RELOAD: /templates/* files",
      "RELOAD: architecture_workflow.json (this file)",
      "READ: systems/<system_name>/current_focus.md",
      "CONFIRM: State system name, step, substep, next action",
      "RESUME: Continue with confirmed action"
    ],
    "degradation_signals": [
      "Asking about system name when it's in working_memory.json",
      "Forgetting current step/substep",
      "Repeating questions about completed work",
      "Using wrong template format",
      "Creating files in wrong directory",
      "Not updating progress tracking files"
    ],
    "tracking_files": {
      "process_log": "systems/<system_name>/process_log.md",
      "working_memory": "systems/<system_name>/working_memory.json",
      "progress_tracker": "systems/<system_name>/step_progress_tracker.json",
      "current_focus": "systems/<system_name>/current_focus.md",
      "context_checkpoint": "systems/<system_name>/context_checkpoint.md"
    }
  },

  "prerequisites": {
    "required_tools": [
      {"path": "/home/ajs7/project/saa/tools/validate_architecture.py", "purpose": "Validate service architecture JSON files"},
      {"path": "/home/ajs7/project/saa/tools/system_of_systems_graph.py", "purpose": "Generate system graph and detect issues"},
      {"path": "/home/ajs7/project/saa/tools/analyze_features.py", "purpose": "Analyze system features and requirements"},
      {"path": "/home/ajs7/project/saa/tools/generate_interface_contracts.py", "purpose": "Generate ICD specifications"}
    ],
    "required_templates": [
      {"path": "/home/ajs7/project/saa/templates/index_template.json", "purpose": "System index format"},
      {"path": "/home/ajs7/project/saa/templates/service_architecture_template.json", "purpose": "Service architecture format"},
      {"path": "/home/ajs7/project/saa/templates/service_architecture_schema.json", "purpose": "JSON schema validation"}
    ],
    "required_definitions": [
      {"path": "/home/ajs7/project/saa/definitions/architectural_definitions.json", "purpose": "UAF terminology and hierarchy"}
    ],
    "python_dependencies": ["networkx", "matplotlib", "pygraphviz"],
    "system_packages": ["graphviz", "graphviz-dev"]
  },

  "workflow_steps": [
    {
      "step_id": "0",
      "name": "Setup and Verification",
      "description": "Initialize system directory and verify prerequisites",
      "mandatory": true,
      "context_refresh": "before",
      "actions": [
        {
          "action_id": "0.1",
          "description": "Verify all required tools are present",
          "tool": "bash",
          "command": "for tool in validate_architecture.py system_of_systems_graph.py analyze_features.py generate_interface_contracts.py; do [ -f /home/ajs7/project/saa/tools/$tool ] || echo \"ERROR: Missing $tool\"; done",
          "success_criteria": "No ERROR messages"
        },
        {
          "action_id": "0.2",
          "description": "Create system directory structure",
          "tool": "bash",
          "command": "mkdir -p /home/ajs7/project/saa/systems/<system_name>",
          "success_criteria": "Directory exists"
        },
        {
          "action_id": "0.3",
          "description": "Initialize context management files",
          "tool": "manual",
          "tasks": [
            "Create process_log.md with initial entry",
            "Create working_memory.json with system metadata",
            "Create step_progress_tracker.json with initial state",
            "Create current_focus.md with next action"
          ],
          "success_criteria": "All tracking files created"
        }
      ],
      "validation": {
        "check": "All tools, templates, and tracking files exist",
        "on_failure": "Stop and report missing prerequisites"
      },
      "next_step": "1"
    },
    
    {
      "step_id": "1",
      "name": "System Analysis and Classification",
      "description": "Analyze input system description and determine hierarchy level",
      "mandatory": true,
      "context_refresh": "before",
      "inputs": [
        "System description document (markdown, text, or structured format)",
        "Optional: Existing SRDs/ICDs"
      ],
      "actions": [
        {
          "action_id": "1.1",
          "description": "Identify system hierarchy level",
          "decision_points": {
            "level_0_is_system_of_systems": "Decompose to Level 1 (systems) → Level 2 (components)",
            "level_0_is_individual_system": "Decompose to Level 1 (major components) → Level 2 (submodules)",
            "level_0_is_major_component": "Decompose to Level 1 (submodules) → Level 2 (functions/classes)"
          },
          "tool": "manual",
          "guidance": "Read system description and determine starting hierarchy level using UAF definitions"
        },
        {
          "action_id": "1.2",
          "description": "Identify all components and external systems",
          "tool": "manual",
          "guidance": "List all services, components, and external/non-modifiable systems. Include everything in communication paths."
        },
        {
          "action_id": "1.3",
          "description": "Document initial system metadata",
          "tool": "manual",
          "update_files": ["working_memory.json", "process_log.md"],
          "required_info": ["system_name", "hierarchy_level", "component_list", "external_systems"]
        }
      ],
      "validation": {
        "check": "System hierarchy identified and all components listed",
        "tool": "/home/ajs7/project/saa/tools/analyze_features.py",
        "on_failure": "Request clarification on system structure"
      },
      "next_step": "2"
    },

    {
      "step_id": "2",
      "name": "Service Decomposition and Interface Deduction",
      "description": "Decompose system and deduce all interfaces using graph-based analysis with RAG",
      "mandatory": true,
      "context_refresh": "before",
      "rag_required": true,
      "rag_queries": [
        "Latest microservices architecture patterns and best practices",
        "Modern API design standards and interface specifications",
        "Current security frameworks and authentication patterns",
        "Container orchestration and service deployment strategies"
      ],
      "actions": [
        {
          "action_id": "2.1",
          "description": "Perform RAG retrieval for best practices",
          "tool": "rag",
          "queries": ["microservices patterns", "API design", "security frameworks", "deployment strategies"],
          "output": "Create best_practices_summary.md with 2-3 paragraph synthesis"
        },
        {
          "action_id": "2.2",
          "description": "Apply Two-Level Rule decomposition",
          "tool": "manual",
          "guidance": "Decompose at least two levels from starting hierarchy. Apply Level 3 if objective triggers met.",
          "objective_triggers": [
            "Interface marked 'recommended' with no existing implementation",
            "Interface requires >3 method calls or data transformation",
            "Interface is safety/security critical",
            "Interface coordinates >2 services",
            "Interface bridges with external systems",
            "Interface is performance bottleneck (>5 connections)"
          ]
        },
        {
          "action_id": "2.3",
          "description": "Create service_architecture.json for each component",
          "tool": "manual",
          "template": "/home/ajs7/project/saa/templates/service_architecture_template.json",
          "batch_size": 5,
          "context_refresh_after_batch": true,
          "guidance": "Use exact template format. Mark implementation_status (existing/recommended/hypothetical) with justification.",
          "directory_structure": "systems/<system_name>/<service_name>/service_architecture.json"
        },
        {
          "action_id": "2.4",
          "description": "Build system graph and infer interfaces",
          "tool": "python_networkx",
          "guidance": "Create directed graph with all services as nodes and dependencies as edges. Use BFS/DFS to infer end-to-end paths.",
          "output": "In-memory graph for interface deduction"
        },
        {
          "action_id": "2.5",
          "description": "Update service architectures with deduced interfaces",
          "tool": "manual",
          "guidance": "For each inferred path, update ALL relevant service_architecture.json files with consistent message formats.",
          "validation_per_batch": true
        },
        {
          "action_id": "2.6",
          "description": "Create and update index.json",
          "tool": "manual",
          "template": "/home/ajs7/project/saa/templates/index_template.json",
          "file_path": "systems/<system_name>/index.json",
          "guidance": "Map each service to ABSOLUTE path of its service_architecture.json. Update after each service creation."
        },
        {
          "action_id": "2.7",
          "description": "Generate Interface Contract Documents (ICDs)",
          "tool": "/home/ajs7/project/saa/tools/generate_interface_contracts.py",
          "command": "python3 /home/ajs7/project/saa/tools/generate_interface_contracts.py /home/ajs7/project/saa/systems/<system_name>/",
          "output": "systems/<system_name>/interfaces/*.json",
          "success_criteria": "ICD created for each interface with complete input/output contracts"
        }
      ],
      "validation": {
        "check": "All services have service_architecture.json, index.json is complete, ICDs generated",
        "tool": "/home/ajs7/project/saa/tools/validate_architecture.py",
        "on_failure": "Fix validation errors before proceeding"
      },
      "next_step": "3"
    },

    {
      "step_id": "3",
      "name": "Parse Global Architecture Constraints",
      "description": "Load and parse system-wide constraints and requirements",
      "mandatory": false,
      "skip_if": "No ARCHITECTURE.json or system-wide constraints document",
      "actions": [
        {
          "action_id": "3.1",
          "description": "Read ARCHITECTURE.json or equivalent",
          "tool": "manual",
          "guidance": "Parse global constraints, security requirements, performance targets, compliance needs"
        },
        {
          "action_id": "3.2",
          "description": "Document constraints in working_memory.json",
          "tool": "manual",
          "update_files": ["working_memory.json"]
        }
      ],
      "validation": {
        "check": "Global constraints documented",
        "on_failure": "Proceed with service-level constraints only"
      },
      "next_step": "4"
    },

    {
      "step_id": "4",
      "name": "Structured Object Translation",
      "description": "Ensure all service architectures are in proper structured format",
      "mandatory": true,
      "context_refresh": "before",
      "actions": [
        {
          "action_id": "4.1",
          "description": "Validate all service_architecture.json files against template",
          "tool": "/home/ajs7/project/saa/tools/validate_architecture.py",
          "command": "python3 /home/ajs7/project/saa/tools/validate_architecture.py /home/ajs7/project/saa/systems/<system_name>",
          "success_criteria": "All files pass validation"
        },
        {
          "action_id": "4.2",
          "description": "Fix any template violations",
          "tool": "manual",
          "guidance": "Correct missing fields, wrong types, incorrect classifications"
        }
      ],
      "validation": {
        "check": "All services conform to template",
        "tool": "/home/ajs7/project/saa/tools/validate_architecture.py",
        "on_failure": "Fix validation errors, then re-validate"
      },
      "next_step": "5"
    },

    {
      "step_id": "5",
      "name": "Deployment Architecture Validation",
      "description": "Reconcile logical architecture with deployment reality using RAG best practices",
      "mandatory": true,
      "context_refresh": "before",
      "rag_required": true,
      "rag_queries": [
        "Current DevOps and deployment best practices",
        "Container orchestration security patterns",
        "API gateway configuration standards",
        "Infrastructure as Code validation techniques"
      ],
      "actions": [
        {
          "action_id": "5.1",
          "description": "Perform RAG retrieval for deployment best practices",
          "tool": "rag",
          "output": "deployment_best_practices.md"
        },
        {
          "action_id": "5.2",
          "description": "Scan for deployment artifacts",
          "tool": "bash",
          "patterns": ["docker-compose.yml", "*.yaml", "nginx.conf", "*.tf", "Dockerfile"],
          "guidance": "Find all deployment configuration files"
        },
        {
          "action_id": "5.3",
          "description": "Parse deployment configurations",
          "tool": "manual",
          "guidance": "Extract service routing, dependencies, load balancer rules, security boundaries from deployment configs"
        },
        {
          "action_id": "5.4",
          "description": "Reconcile logical and deployment architectures",
          "tool": "manual",
          "guidance": "Compare service_architecture.json dependencies with actual deployment routing. Identify mismatches.",
          "common_issues": [
            "Logical dependencies don't match deployment routing",
            "Missing services in deployment",
            "Security boundary violations",
            "Protocol mismatches"
          ]
        },
        {
          "action_id": "5.5",
          "description": "Update service architectures based on deployment reality",
          "tool": "manual",
          "guidance": "Correct service_architecture.json files to reflect true deployment patterns",
          "update_files": ["service_architecture.json files"]
        }
      ],
      "validation": {
        "check": "Logical architecture matches deployment architecture",
        "on_failure": "Continue updating until reconciled"
      },
      "next_step": "5.5"
    },

    {
      "step_id": "5.5",
      "name": "Interface Implementation Analysis",
      "description": "Conditional deeper decomposition for complex interfaces",
      "mandatory": "conditional",
      "trigger_conditions": "Any objective decomposition trigger from step 2.2 is met",
      "actions": [
        {
          "action_id": "5.5.1",
          "description": "Request source code references",
          "tool": "manual",
          "guidance": "Ask human for GitHub URLs, documentation links, API specs for components with complex interfaces"
        },
        {
          "action_id": "5.5.2",
          "description": "Analyze source code for interface implementation",
          "tool": "manual",
          "guidance": "Identify specific classes, methods, functions handling each interface. Mark as existing/recommended/hypothetical."
        },
        {
          "action_id": "5.5.3",
          "description": "Create Level 3 decomposition if needed",
          "tool": "manual",
          "directory_structure": "systems/<system_name>/<component>/<internal_module>/service_architecture.json",
          "guidance": "Document precise integration points and call flows with confidence levels"
        }
      ],
      "validation": {
        "check": "Complex interfaces have implementation guidance with appropriate status markers",
        "on_failure": "Request clarification or mark as recommended/hypothetical with justification"
      },
      "next_step": "6"
    },

    {
      "step_id": "6",
      "name": "Incremental Validation and Persistence",
      "description": "Validate architecture completeness and consistency with RAG quality assurance",
      "mandatory": true,
      "context_refresh": "before",
      "rag_required": true,
      "rag_queries": [
        "Software architecture validation best practices",
        "API contract testing techniques",
        "DevOps quality assurance methods",
        "Security architecture review frameworks"
      ],
      "actions": [
        {
          "action_id": "6.1",
          "description": "Template validation",
          "tool": "/home/ajs7/project/saa/tools/validate_architecture.py",
          "command": "python3 /home/ajs7/project/saa/tools/validate_architecture.py /home/ajs7/project/saa/systems/<system_name>",
          "success_criteria": "All service architectures pass template validation"
        },
        {
          "action_id": "6.2",
          "description": "Graph consistency validation",
          "tool": "/home/ajs7/project/saa/tools/system_of_systems_graph.py",
          "command": "python3 /home/ajs7/project/saa/tools/system_of_systems_graph.py /home/ajs7/project/saa/systems/<system_name> --format json --output systems/<system_name>/system_of_systems_graph.json",
          "output": "systems/<system_name>/system_of_systems_graph.json",
          "success_criteria": "No critical issues in architectural_issues report"
        },
        {
          "action_id": "6.3",
          "description": "Resolve architectural issues",
          "tool": "manual",
          "guidance": "Read architectural_issues report. Fix circular dependencies, missing interfaces, orphaned nodes.",
          "iterative": true,
          "success_criteria": "architectural_issues report shows no critical issues"
        },
        {
          "action_id": "6.4",
          "description": "Integration readiness validation",
          "tool": "manual",
          "checks": [
            "All dependencies resolvable",
            "All interfaces have implementations or clear specs",
            "External systems properly marked",
            "ICDs complete for all interfaces"
          ],
          "success_criteria": "All checks pass"
        },
        {
          "action_id": "6.5",
          "description": "Index management validation",
          "tool": "manual",
          "guidance": "Verify index.json contains correct absolute paths for all services",
          "success_criteria": "All paths in index.json are valid and accessible"
        },
        {
          "action_id": "6.6",
          "description": "Update process log",
          "tool": "manual",
          "update_files": ["process_log.md"],
          "guidance": "Document validation results, issues found, resolutions applied"
        }
      ],
      "validation": {
        "check": "All validation checkpoints pass",
        "on_failure": "Iterate on fixes until all validations pass"
      },
      "next_step": "7"
    },

    {
      "step_id": "7",
      "name": "Water-Tight Specification Verification",
      "description": "Final verification that specifications support independent development",
      "mandatory": true,
      "context_refresh": "before",
      "actions": [
        {
          "action_id": "7.1",
          "description": "Verify completeness of each service specification",
          "tool": "manual",
          "checks": [
            "Comprehensive functional requirements (SRD)",
            "Validated interface contracts (ICD)",
            "All dependencies specified",
            "Security, performance, compliance requirements documented"
          ]
        },
        {
          "action_id": "7.2",
          "description": "Verify integration guarantee",
          "tool": "manual",
          "checks": [
            "Interfaces coordinated across system",
            "Message formats consistent",
            "All intermediate interfaces identified",
            "Dependencies complete and unambiguous"
          ]
        },
        {
          "action_id": "7.3",
          "description": "Document independent development readiness",
          "tool": "manual",
          "update_files": ["process_log.md"],
          "guidance": "Confirm teams can develop services independently with integration guarantee"
        }
      ],
      "validation": {
        "check": "All services have water-tight specifications",
        "on_failure": "Return to step 2 or 6 to complete specifications"
      },
      "next_step": "8"
    },

    {
      "step_id": "8",
      "name": "Generate Implementation-Ready Artifacts",
      "description": "Create comprehensive development artifacts for each service",
      "mandatory": true,
      "context_refresh": "before_and_between_substeps",
      "substeps": [
        {
          "substep_id": "8.1",
          "name": "API Contract Definitions",
          "description": "Generate OpenAPI/AsyncAPI specifications",
          "per_service": true,
          "template": "api_contracts_template.json",
          "output_file": "systems/<system_name>/<service>/api_contracts.json",
          "includes": [
            "Complete endpoint definitions with request/response schemas",
            "Authentication and authorization requirements",
            "Error handling and status codes",
            "Rate limiting and throttling configurations"
          ],
          "context_refresh_after_n_services": 3
        },
        {
          "substep_id": "8.2",
          "name": "Data Model Specifications",
          "description": "Create comprehensive data architecture artifacts",
          "per_service": true,
          "output_file": "systems/<system_name>/<service>/data_models.json",
          "includes": [
            "Database schemas with relationships and constraints",
            "Data validation rules and business logic",
            "Data flow diagrams and transformations",
            "Caching strategies and persistence layer"
          ],
          "context_refresh_after_n_services": 3
        },
        {
          "substep_id": "8.3",
          "name": "Integration Test Specifications",
          "description": "Create detailed testing frameworks",
          "per_service": true,
          "output_file": "systems/<system_name>/<service>/integration_tests.json",
          "includes": [
            "Contract testing scenarios for each interface",
            "Mock service definitions for dependencies",
            "Performance benchmarks and SLA requirements",
            "End-to-end integration test scenarios"
          ],
          "context_refresh_after_n_services": 3
        },
        {
          "substep_id": "8.4",
          "name": "Infrastructure and Deployment",
          "description": "Develop operations-ready specifications",
          "per_service": true,
          "output_files": [
            "systems/<system_name>/<service>/infrastructure.json",
            "systems/<system_name>/<service>/config_templates/",
            "systems/<system_name>/<service>/cicd_pipeline.json"
          ],
          "includes": [
            "Resource requirements and scaling parameters",
            "Environment-specific configuration templates",
            "CI/CD pipeline definitions",
            "Monitoring, logging, alerting configurations"
          ],
          "context_refresh_after_n_services": 2
        },
        {
          "substep_id": "8.5",
          "name": "Development Support Materials",
          "description": "Generate developer-friendly resources",
          "per_service": true,
          "output_files": [
            "systems/<system_name>/<service>/implementation_guide.md",
            "systems/<system_name>/<service>/stubs/",
            "systems/<system_name>/<service>/dev_setup/"
          ],
          "includes": [
            "Implementation guides with technology recommendations",
            "Code stubs and mock implementations",
            "Development environment setup instructions",
            "Architecture decision records"
          ],
          "context_refresh_after_n_services": 2
        },
        {
          "substep_id": "8.6",
          "name": "Quality Assurance Framework",
          "description": "Create comprehensive QA artifacts",
          "per_service": true,
          "output_files": [
            "systems/<system_name>/<service>/testing_requirements.json",
            "systems/<system_name>/<service>/observability.json",
            "systems/<system_name>/<service>/compliance.json",
            "systems/<system_name>/<service>/runbooks/"
          ],
          "includes": [
            "Testing requirements and coverage specs",
            "Security and compliance requirements",
            "Monitoring and observability definitions",
            "Operational runbooks"
          ],
          "context_refresh_after_n_services": 2
        }
      ],
      "validation": {
        "check": "All substeps completed for all services",
        "tool": "manual",
        "on_failure": "Complete missing artifacts"
      },
      "next_step": "9"
    },

    {
      "step_id": "9",
      "name": "Process Completion and Build Preparation",
      "description": "Finalize artifacts and prepare for development phase",
      "mandatory": true,
      "context_refresh": "before",
      "actions": [
        {
          "action_id": "9.1",
          "description": "Artifact cleanup",
          "tool": "manual",
          "tasks": [
            "Archive temporary files (working_memory.json, current_focus.md, step_progress_tracker.json)",
            "Move to systems/<system_name>/archive/",
            "Preserve all service_architecture.json, Step 8 artifacts, graph, index, ICDs"
          ]
        },
        {
          "action_id": "9.2",
          "description": "Create build-ready index",
          "tool": "manual",
          "output_file": "systems/<system_name>/build_ready_index.json",
          "includes": [
            "System metadata and architecture version",
            "Recommended build order and dependency groups",
            "Complete artifact registry with absolute paths",
            "Validation status summary",
            "Implementation team guidance"
          ]
        },
        {
          "action_id": "9.3",
          "description": "Create build instructions document",
          "tool": "manual",
          "output_file": "systems/<system_name>/BUILD_INSTRUCTIONS.md",
          "includes": [
            "Quick start guide",
            "Development team assignments",
            "Artifact usage guide",
            "Quality gates"
          ]
        },
        {
          "action_id": "9.4",
          "description": "Create functional test strategy",
          "tool": "manual",
          "output_file": "systems/<system_name>/FUNCTIONAL_TEST_STRATEGY.md",
          "includes": [
            "Testing hierarchy (service/integration/system)",
            "Test data strategy",
            "Test automation framework",
            "Quality gates and success criteria"
          ]
        },
        {
          "action_id": "9.5",
          "description": "Final process log entry",
          "tool": "manual",
          "update_files": ["process_log.md"],
          "guidance": "Document completion, artifacts produced, any outstanding items"
        }
      ],
      "validation": {
        "check": "All completion artifacts created and archived",
        "on_failure": "Complete missing artifacts"
      },
      "next_step": "complete"
    }
  ],

  "decision_flows": {
    "hierarchy_classification": {
      "input": "System description",
      "decision": "What is Level 0?",
      "options": {
        "system_of_systems": {
          "decompose_to": ["Level 1: Individual Systems", "Level 2: System Components"],
          "example": "Distributed microservices platform → Individual services → Service modules"
        },
        "individual_system": {
          "decompose_to": ["Level 1: Major Components", "Level 2: Minor Components"],
          "example": "Web application → Frontend/Backend/Database → React components/API routes/Tables"
        },
        "major_component": {
          "decompose_to": ["Level 1: Submodules", "Level 2: Functions/Classes"],
          "example": "Authentication service → User management/Token handling → Classes and methods"
        }
      }
    },
    "level_3_decomposition": {
      "input": "Interface complexity analysis",
      "decision": "Does interface meet any objective trigger?",
      "triggers": {
        "recommended_no_impl": "Interface marked recommended with no existing implementation",
        "complex_transform": "Interface requires >3 method calls or data transformation",
        "safety_critical": "Interface is safety or security critical",
        "multi_service": "Interface coordinates >2 services",
        "external_bridge": "Interface bridges with external systems",
        "bottleneck": "Interface is performance bottleneck (>5 connections)"
      },
      "action_if_yes": "Proceed to Level 3 decomposition (internal modules/classes)",
      "action_if_no": "Level 2 decomposition sufficient"
    },
    "validation_failure": {
      "input": "Validation failure detected",
      "decision": "Which validation failed?",
      "actions": {
        "template_violation": "Fix service_architecture.json formatting, re-run validation",
        "graph_cycles": "Resolve circular dependencies (event-driven pattern, message queues)",
        "missing_interfaces": "Return to Step 2, deduce missing interfaces",
        "deployment_mismatch": "Update service_architecture.json to match deployment reality",
        "incomplete_specs": "Complete missing SRD/ICD information"
      }
    }
  },

  "tool_reference": {
    "validate_architecture": {
      "path": "/home/ajs7/project/saa/tools/validate_architecture.py",
      "usage": "python3 validate_architecture.py <system_path>",
      "purpose": "Validate service_architecture.json files against template",
      "when_to_use": ["After creating service files", "After updates", "Before proceeding to next step"]
    },
    "system_of_systems_graph": {
      "path": "/home/ajs7/project/saa/tools/system_of_systems_graph.py",
      "usage": "python3 system_of_systems_graph.py <system_path> --format json --output <output_path>",
      "purpose": "Generate system graph and detect architectural issues",
      "when_to_use": ["After all services created", "After major architecture changes", "Step 6 validation"]
    },
    "generate_interface_contracts": {
      "path": "/home/ajs7/project/saa/tools/generate_interface_contracts.py",
      "usage": "python3 generate_interface_contracts.py <system_path>",
      "purpose": "Generate ICD specifications from service architectures",
      "when_to_use": ["After interface deduction in Step 2", "When interfaces change"]
    },
    "analyze_features": {
      "path": "/home/ajs7/project/saa/tools/analyze_features.py",
      "usage": "python3 analyze_features.py <feature_summary_path>",
      "purpose": "Analyze system features and requirements",
      "when_to_use": ["Step 1 system analysis", "Verifying requirements coverage"]
    }
  },

  "quick_reference": {
    "before_every_operation": [
      "1. Read current_focus.md",
      "2. Check step_progress_tracker.json",
      "3. Verify operations_since_refresh <= 4",
      "4. Confirm: system name, step, substep, next action"
    ],
    "context_refresh_when": [
      "Operation count >= 4",
      "Time >= 12 minutes",
      "Transitioning steps or substeps",
      "Uncertainty about current task",
      "Any degradation signal detected"
    ],
    "key_principles": [
      "Use exact template formats",
      "Mark implementation_status with justification",
      "Update progress tracking after each operation",
      "Validate frequently (every 5-7 services)",
      "Request source code when making recommendations",
      "Document all decisions in process_log.md"
    ]
  }
}
