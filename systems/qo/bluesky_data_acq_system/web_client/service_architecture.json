{
  "template_version": "1.0",
  "template_description": "Standard template for service_architecture.json files based on UAF definitions",
  "service_name": "Unified Web Client",
  "service_id": "web_client",
  "hierarchical_tier": "tier_2_components",
  "component_classification": "service",
  "purpose": "Unified web client that provides common access to both Queue Server and Device Monitoring services while treating them independently. Integrates queue management, device monitoring, and coordination features in a single user interface.",
  "dependencies": [
    "nginx"
  ],
  "interfaces": [
    {
      "name": "HTTPS Client Interface",
      "interface_type": "http_endpoint",
      "communication_pattern": "synchronous",
      "dependency_type": "direct",
      "path": "/",
      "method": "GET",
      "description": "Web browser interface connecting to nginx for unified access to all backend services",
      "auth_required": true,
      "version": "1.0",
      "implementation_status": "recommended",
      "source_verification": "Recommended solution - unified user experience through single entry point"
    },
    {
      "name": "Queue Management Interface",
      "interface_type": "http_endpoint",
      "communication_pattern": "synchronous",
      "dependency_type": "indirect",
      "path": "/api/queue",
      "method": "GET",
      "description": "Queue management operations through nginx routing to bluesky-httpserver",
      "auth_required": true,
      "version": "1.0",
      "implementation_status": "recommended",
      "source_verification": "Recommended solution - unified access to queue operations"
    },
    {
      "name": "Device Monitoring WebSocket",
      "interface_type": "message",
      "communication_pattern": "bidirectional",
      "dependency_type": "indirect",
      "description": "Real-time device monitoring through nginx WebSocket routing to ophyd-websocket",
      "auth_required": false,
      "version": "1.0",
      "implementation_status": "recommended",
      "source_verification": "Recommended solution - unified access to device monitoring"
    },
    {
      "name": "Coordination Status Interface",
      "interface_type": "http_endpoint",
      "communication_pattern": "synchronous",
      "dependency_type": "indirect",
      "path": "/api/coordination",
      "method": "GET",
      "description": "Coordination service access through nginx routing for lock status and safety information",
      "auth_required": true,
      "version": "1.0",
      "implementation_status": "recommended",
      "source_verification": "Recommended solution - unified access to coordination status"
    }
  ],
  "is_external": false,
  "parent_system": "bluesky_data_acq_system",
  "security": {
    "api_key_authentication": true,
    "ssl_tls": true,
    "additional_requirements": [
      "Authentication handled by nginx and backend services",
      "Session management for user state",
      "Secure WebSocket connections"
    ]
  },
  "deployment": {
    "ansible_managed": false,
    "systemd_service": false,
    "python_uvicorn": false,
    "docker_container": false,
    "additional_info": {
      "deployment_type": "Static web assets served by nginx",
      "client_side": "JavaScript/React application",
      "integration": "Uses React hooks and HTTP clients for backend communication"
    }
  },
  "performance": {
    "expected_load": "medium",
    "scaling_strategy": "horizontal",
    "resource_requirements": {
      "browser_performance": "Efficient rendering of real-time data",
      "network_efficiency": "Optimized WebSocket and HTTP usage",
      "user_experience": "Responsive interface for scientific operations"
    }
  },
  "version": "1.0+2025-10-02",
  "source_references": {
    "github_repo": "",
    "documentation_links": [
      "https://reactjs.org/",
      "https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API"
    ],
    "analysis_date": "2025-10-02",
    "confidence_level": "medium"
  },
  "implementation_status": "recommended",
  "verification_notes": "New unified client recommendation based on system requirements for common access to independent services",
  "justification": {
    "rationale": "Provides unified user experience while maintaining service separation and enabling independent development",
    "standards_reference": "Single Page Application (SPA) pattern with microservices backend",
    "best_practices_reference": "API gateway pattern with unified frontend for multiple backend services",
    "examples": "Common pattern in modern distributed web applications",
    "trade_offs": "Frontend complexity vs. unified user experience and simplified deployment"
  }
}