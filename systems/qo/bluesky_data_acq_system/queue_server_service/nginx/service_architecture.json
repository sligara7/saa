{
  "template_version": "1.0",
  "template_description": "Standard template for service_architecture.json files based on UAF definitions",
  "service_name": "Nginx Reverse Proxy",
  "service_id": "nginx",
  "hierarchical_tier": "tier_2_components",
  "component_classification": "service",
  "purpose": "Reverse proxy providing HTTPS termination, API routing, and load balancing for bluesky-httpserver. Routes HTTP(S) requests to bluesky-httpserver for queue management and WebSocket connections to ophyd-websocket for device monitoring.",
  "dependencies": [],
  "interfaces": [
    {
      "name": "HTTPS External Interface",
      "interface_type": "http_endpoint",
      "communication_pattern": "synchronous",
      "dependency_type": "direct",
      "path": "/",
      "method": "GET",
      "description": "External HTTPS endpoint for all client connections with SSL/TLS termination",
      "auth_required": true,
      "version": "1.0",
      "implementation_status": "existing",
      "source_verification": "Based on actual nginx deployment configuration"
    },
    {
      "name": "Queue API Routing",
      "interface_type": "http_endpoint",
      "communication_pattern": "synchronous",
      "dependency_type": "direct",
      "path": "/api/queue",
      "method": "GET",
      "description": "Routes HTTP(S) requests to bluesky-httpserver for queue management (upstream service)",
      "auth_required": true,
      "version": "1.0",
      "implementation_status": "existing",
      "source_verification": "Based on actual nginx routing configuration"
    },
    {
      "name": "WebSocket Routing",
      "interface_type": "message",
      "communication_pattern": "bidirectional",
      "dependency_type": "direct",
      "description": "Routes WebSocket connections to ophyd-websocket for device monitoring/control (upstream service)",
      "auth_required": false,
      "version": "1.0",
      "implementation_status": "recommended",
      "source_verification": "Recommended solution - unified routing for both HTTP and WebSocket traffic"
    },
    {
      "name": "Load Balancing",
      "interface_type": "architectural_constraint",
      "communication_pattern": "synchronous",
      "dependency_type": "direct",
      "description": "Load balancing and high availability for backend services",
      "auth_required": false,
      "version": "1.0",
      "implementation_status": "existing",
      "source_verification": "Based on nginx load balancing capabilities"
    }
  ],
  "is_external": false,
  "parent_system": "queue_server_service",
  "security": {
    "api_key_authentication": false,
    "ssl_tls": true,
    "additional_requirements": [
      "SSL/TLS termination for all external connections",
      "Security headers and HTTPS redirection",
      "Rate limiting and DDoS protection"
    ]
  },
  "deployment": {
    "ansible_managed": true,
    "systemd_service": true,
    "python_uvicorn": false,
    "docker_container": false,
    "additional_info": {
      "service_name": "nginx systemd service",
      "configuration": "Templated nginx configuration for reproducible deployments",
      "ssl_certificates": "SSL certificate management for HTTPS"
    }
  },
  "performance": {
    "expected_load": "high",
    "scaling_strategy": "horizontal",
    "resource_requirements": {
      "description": "High-performance reverse proxy handling all external traffic",
      "concurrent_connections": "Multiple simultaneous HTTP and WebSocket connections",
      "ssl_termination": "SSL/TLS processing overhead"
    }
  },
  "version": "1.0+2025-10-02",
  "source_references": {
    "github_repo": "",
    "documentation_links": [
      "https://nginx.org/en/docs/",
      "https://nginx.org/en/docs/http/websocket.html"
    ],
    "analysis_date": "2025-10-02",
    "confidence_level": "high"
  },
  "implementation_status": "existing",
  "verification_notes": "Based on actual nginx deployment configuration with WebSocket routing recommendations",
  "justification": {
    "rationale": "Provides security, SSL termination, and unified routing for heterogeneous backend services",
    "standards_reference": "Industry standard reverse proxy patterns",
    "best_practices_reference": "Single point of entry for security and SSL termination",
    "examples": "Standard pattern in microservices and web application architectures",
    "trade_offs": "Additional proxy layer vs. security, SSL termination, and unified routing benefits"
  }
}