{
  "directed": true,
  "multigraph": false,
  "graph": {},
  "nodes": [
    {
      "label": "Campaign Story Engine",
      "level": "module",
      "raw": {
        "uaf_version": "1.2",
        "uaf_standards": {
          "dmm": "ISO/IEC 19540-1:2022",
          "uafml": "ISO/IEC 19540-2:2022"
        },
        "service_name": "Campaign Story Engine",
        "service_id": "story_engine",
        "hierarchical_tier": "tier_3_internal_modules",
        "component_classification": "function",
        "purpose": "Manage and orchestrate campaign storylines, ensuring narrative consistency, theme coherence, and dynamic adaptation based on player choices while maintaining D&D 5e structural integrity",
        "applicable_viewpoints": [
          {
            "viewpoint": "operational",
            "concern": "Story management and adaptation",
            "key_views": [
              "Story Flow",
              "Plot Adaptation"
            ],
            "stakeholders": [
              "Story Writers",
              "Game Designers"
            ]
          },
          {
            "viewpoint": "services",
            "concern": "Story engine interfaces",
            "key_views": [
              "Story API",
              "Plot Management"
            ],
            "stakeholders": [
              "Service Developers",
              "Integration Engineers"
            ]
          },
          {
            "viewpoint": "resources",
            "concern": "Story data and persistence",
            "key_views": [
              "Story Graph",
              "State Management"
            ],
            "stakeholders": [
              "Data Architects",
              "Storage Engineers"
            ]
          }
        ],
        "service_resource_relationships": [
          {
            "resource_type": "Story Store",
            "relationship": "provides",
            "capability": "Story State Persistence",
            "resource_performer": "PostgreSQL 18"
          },
          {
            "resource_type": "LLM Service",
            "relationship": "consumes",
            "capability": "Plot Generation",
            "resource_performer": "AI Content Generator"
          },
          {
            "resource_type": "Rules Engine",
            "relationship": "consumes",
            "capability": "Story Validation",
            "resource_performer": "dd5e_rules_engine"
          }
        ],
        "dependencies": [
          "branch_manager",
          "plot_generator"
        ],
        "interfaces": [
          {
            "name": "manage_story_state",
            "interface_type": "http_endpoint",
            "communication_pattern": "synchronous",
            "dependency_type": "direct",
            "path": "/api/v2/campaigns/{id}/story/state",
            "method": "PUT",
            "description": "Update and manage story state with branching support",
            "auth_required": true,
            "version": "1.0",
            "implementation_status": "recommended",
            "source_verification": "Based on feature summary - Story Management",
            "information_element_flows": [
              "data_exchange",
              "control_signal",
              "status_report"
            ],
            "service_resource_relationship": "implements",
            "applicable_viewpoints": [
              "services",
              "resources"
            ]
          },
          {
            "name": "adapt_storyline",
            "interface_type": "http_endpoint",
            "communication_pattern": "synchronous",
            "dependency_type": "direct",
            "path": "/api/v2/campaigns/{id}/story/adapt",
            "method": "POST",
            "description": "Adapt storyline based on player choices and session outcomes",
            "auth_required": true,
            "version": "1.0",
            "implementation_status": "recommended",
            "source_verification": "Based on feature summary - Story Adaptation",
            "information_element_flows": [
              "data_exchange",
              "analysis_result"
            ],
            "service_resource_relationship": "implements",
            "applicable_viewpoints": [
              "services",
              "resources"
            ]
          },
          {
            "name": "story_events",
            "interface_type": "message",
            "communication_pattern": "asynchronous",
            "dependency_type": "indirect",
            "description": "Publish story-related events to Message Hub",
            "auth_required": true,
            "version": "1.0",
            "implementation_status": "recommended",
            "source_verification": "Based on feature summary - Event System",
            "information_element_flows": [
              "event_notification",
              "status_report"
            ],
            "service_resource_relationship": "implements",
            "applicable_viewpoints": [
              "services",
              "resources"
            ]
          }
        ],
        "is_external": false,
        "parent_system": "campaign_management_system",
        "security": {
          "api_key_authentication": false,
          "ssl_tls": true,
          "additional_requirements": [
            "OAuth2 JWT via gateway",
            "RBAC",
            "Story state validation"
          ]
        },
        "deployment": {
          "ansible_managed": true,
          "systemd_service": false,
          "python_uvicorn": true,
          "docker_container": true,
          "additional_info": {
            "fastapi": "0.118.0",
            "python": "3.13.7"
          }
        },
        "performance": {
          "expected_load": "medium",
          "scaling_strategy": "horizontal",
          "resource_requirements": {
            "state_transition_latency": "< 100ms",
            "adaptation_latency": "< 2s"
          }
        },
        "version": "1.0+2025-10-04",
        "source_references": {
          "documentation_links": [
            "roll20.net/compendium/dnd5e/Rules:Free Basic Rules (2024)"
          ],
          "analysis_date": "2025-10-04",
          "confidence_level": "high"
        },
        "implementation_status": "recommended",
        "verification_notes": "Internal module decomposition required for complex story management",
        "justification": {
          "rationale": "Dedicated story management needed for narrative consistency",
          "standards_reference": "UAF 1.2 Level 3 decomposition triggers - complex state management",
          "best_practices_reference": "Event-driven story engine with version control",
          "trade_offs": "Added complexity balanced against narrative coherence requirements"
        }
      },
      "id": "story_engine"
    },
    {
      "label": "Campaign Branch Manager",
      "level": "module",
      "raw": {
        "uaf_version": "1.2",
        "uaf_standards": {
          "dmm": "ISO/IEC 19540-1:2022",
          "uafml": "ISO/IEC 19540-2:2022"
        },
        "service_name": "Campaign Branch Manager",
        "service_id": "branch_manager",
        "hierarchical_tier": "tier_3_internal_modules",
        "component_classification": "function",
        "purpose": "Manage story branch versioning, state divergence, and merge operations for D&D campaigns using Git-like version control patterns",
        "applicable_viewpoints": [
          {
            "viewpoint": "operational",
            "concern": "Branch management workflow",
            "key_views": [
              "Branch Process",
              "Merge Operations"
            ],
            "stakeholders": [
              "Game Masters",
              "Story Writers"
            ]
          },
          {
            "viewpoint": "services",
            "concern": "Branch control interfaces",
            "key_views": [
              "Branch API",
              "Version Control"
            ],
            "stakeholders": [
              "Service Developers",
              "Integration Engineers"
            ]
          },
          {
            "viewpoint": "information",
            "concern": "Branch data management",
            "key_views": [
              "Branch Model",
              "Version Graph"
            ],
            "stakeholders": [
              "Data Modelers",
              "Game Designers"
            ]
          }
        ],
        "service_resource_relationships": [
          {
            "resource_type": "Branch Store",
            "relationship": "provides",
            "capability": "Branch State Persistence",
            "resource_performer": "PostgreSQL 18"
          },
          {
            "resource_type": "Version Engine",
            "relationship": "consumes",
            "capability": "Version Management",
            "resource_performer": "story_version_service"
          },
          {
            "resource_type": "Diff Engine",
            "relationship": "consumes",
            "capability": "State Difference Analysis",
            "resource_performer": "state_diff_analyzer"
          }
        ],
        "dependencies": [],
        "interfaces": [
          {
            "name": "create_branch",
            "interface_type": "http_endpoint",
            "communication_pattern": "synchronous",
            "dependency_type": "direct",
            "path": "/api/v2/campaigns/{id}/branches",
            "method": "POST",
            "description": "Create new story branch from current state",
            "auth_required": true,
            "version": "1.0",
            "implementation_status": "recommended",
            "source_verification": "Based on feature summary - Branch Management",
            "information_element_flows": [
              "data_exchange",
              "validation_result"
            ],
            "service_resource_relationship": "implements",
            "applicable_viewpoints": [
              "services",
              "information"
            ]
          },
          {
            "name": "merge_branches",
            "interface_type": "http_endpoint",
            "communication_pattern": "synchronous",
            "dependency_type": "direct",
            "path": "/api/v2/campaigns/{id}/branches/merge",
            "method": "POST",
            "description": "Merge multiple story branches",
            "auth_required": true,
            "version": "1.0",
            "implementation_status": "recommended",
            "source_verification": "Based on feature summary - Branch Merging",
            "information_element_flows": [
              "data_exchange",
              "validation_result",
              "conflict_resolution"
            ],
            "service_resource_relationship": "implements",
            "applicable_viewpoints": [
              "services",
              "information"
            ]
          },
          {
            "name": "branch_events",
            "interface_type": "message",
            "communication_pattern": "asynchronous",
            "dependency_type": "indirect",
            "description": "Publish branch state events to Message Hub",
            "auth_required": true,
            "version": "1.0",
            "implementation_status": "recommended",
            "source_verification": "Based on feature summary - Event System",
            "information_element_flows": [
              "event_notification",
              "status_report"
            ],
            "service_resource_relationship": "implements",
            "applicable_viewpoints": [
              "services",
              "information"
            ]
          }
        ],
        "is_external": false,
        "parent_system": "campaign_management_system",
        "security": {
          "api_key_authentication": false,
          "ssl_tls": true,
          "additional_requirements": [
            "OAuth2 JWT via gateway",
            "RBAC",
            "Branch state validation"
          ]
        },
        "deployment": {
          "ansible_managed": true,
          "systemd_service": false,
          "python_uvicorn": true,
          "docker_container": true,
          "additional_info": {
            "fastapi": "0.118.0",
            "python": "3.13.7"
          }
        },
        "performance": {
          "expected_load": "medium",
          "scaling_strategy": "horizontal",
          "resource_requirements": {
            "branch_creation_latency": "< 200ms",
            "merge_operation_latency": "< 1s"
          }
        },
        "version": "1.0+2025-10-04",
        "source_references": {
          "documentation_links": [
            "roll20.net/compendium/dnd5e/Rules:Free Basic Rules (2024)"
          ],
          "analysis_date": "2025-10-04",
          "confidence_level": "high"
        },
        "implementation_status": "recommended",
        "verification_notes": "Internal module decomposition required for branch management complexity",
        "justification": {
          "rationale": "Dedicated branch management needed for story version control",
          "standards_reference": "UAF 1.2 Level 3 decomposition triggers - state divergence complexity",
          "best_practices_reference": "Git-like version control for story management",
          "trade_offs": "Version control overhead balanced against narrative flexibility"
        }
      },
      "id": "branch_manager"
    },
    {
      "label": "Campaign Plot Generator",
      "level": "module",
      "raw": {
        "uaf_version": "1.2",
        "uaf_standards": {
          "dmm": "ISO/IEC 19540-1:2022",
          "uafml": "ISO/IEC 19540-2:2022"
        },
        "service_name": "Campaign Plot Generator",
        "service_id": "plot_generator",
        "hierarchical_tier": "tier_3_internal_modules",
        "component_classification": "function",
        "purpose": "Generate and adapt D&D campaign plotlines using AI/LLM technology while maintaining narrative consistency with D&D 5e themes and mechanics",
        "applicable_viewpoints": [
          {
            "viewpoint": "operational",
            "concern": "Plot generation workflow",
            "key_views": [
              "Generation Process",
              "Adaptation Flow"
            ],
            "stakeholders": [
              "Game Masters",
              "Story Writers"
            ]
          },
          {
            "viewpoint": "services",
            "concern": "Generation interfaces",
            "key_views": [
              "Generator API",
              "LLM Integration"
            ],
            "stakeholders": [
              "Service Developers",
              "AI Engineers"
            ]
          },
          {
            "viewpoint": "information",
            "concern": "Plot data management",
            "key_views": [
              "Plot Model",
              "Theme Graph"
            ],
            "stakeholders": [
              "Data Scientists",
              "Game Designers"
            ]
          }
        ],
        "service_resource_relationships": [
          {
            "resource_type": "Plot Store",
            "relationship": "provides",
            "capability": "Plot State Persistence",
            "resource_performer": "PostgreSQL 18"
          },
          {
            "resource_type": "LLM Service",
            "relationship": "consumes",
            "capability": "Plot Generation",
            "resource_performer": "AI Content Generator"
          },
          {
            "resource_type": "Theme Engine",
            "relationship": "consumes",
            "capability": "Theme Consistency",
            "resource_performer": "theme_analyzer"
          }
        ],
        "dependencies": [
          "story_engine",
          "branch_manager"
        ],
        "interfaces": [
          {
            "name": "generate_plot",
            "interface_type": "http_endpoint",
            "communication_pattern": "synchronous",
            "dependency_type": "direct",
            "path": "/api/v2/campaigns/{id}/plot/generate",
            "method": "POST",
            "description": "Generate new plot elements using AI/LLM",
            "auth_required": true,
            "version": "1.0",
            "implementation_status": "recommended",
            "source_verification": "Based on feature summary - Plot Generation",
            "information_element_flows": [
              "data_exchange",
              "generation_result"
            ],
            "service_resource_relationship": "implements",
            "applicable_viewpoints": [
              "services",
              "information"
            ]
          },
          {
            "name": "adapt_plot",
            "interface_type": "http_endpoint",
            "communication_pattern": "synchronous",
            "dependency_type": "direct",
            "path": "/api/v2/campaigns/{id}/plot/adapt",
            "method": "POST",
            "description": "Adapt existing plot based on campaign state",
            "auth_required": true,
            "version": "1.0",
            "implementation_status": "recommended",
            "source_verification": "Based on feature summary - Plot Adaptation",
            "information_element_flows": [
              "data_exchange",
              "adaptation_result"
            ],
            "service_resource_relationship": "implements",
            "applicable_viewpoints": [
              "services",
              "information"
            ]
          },
          {
            "name": "plot_events",
            "interface_type": "message",
            "communication_pattern": "asynchronous",
            "dependency_type": "indirect",
            "description": "Publish plot generation events to Message Hub",
            "auth_required": true,
            "version": "1.0",
            "implementation_status": "recommended",
            "source_verification": "Based on feature summary - Event System",
            "information_element_flows": [
              "event_notification",
              "status_report"
            ],
            "service_resource_relationship": "implements",
            "applicable_viewpoints": [
              "services",
              "information"
            ]
          }
        ],
        "is_external": false,
        "parent_system": "campaign_management_system",
        "security": {
          "api_key_authentication": false,
          "ssl_tls": true,
          "additional_requirements": [
            "OAuth2 JWT via gateway",
            "RBAC",
            "Plot validation"
          ]
        },
        "deployment": {
          "ansible_managed": true,
          "systemd_service": false,
          "python_uvicorn": true,
          "docker_container": true,
          "additional_info": {
            "fastapi": "0.118.0",
            "python": "3.13.7"
          }
        },
        "performance": {
          "expected_load": "high",
          "scaling_strategy": "horizontal",
          "resource_requirements": {
            "generation_latency": "< 5s",
            "adaptation_latency": "< 2s"
          }
        },
        "version": "1.0+2025-10-04",
        "source_references": {
          "documentation_links": [
            "roll20.net/compendium/dnd5e/Rules:Free Basic Rules (2024)"
          ],
          "analysis_date": "2025-10-04",
          "confidence_level": "high"
        },
        "implementation_status": "recommended",
        "verification_notes": "Internal module decomposition required for generation complexity",
        "justification": {
          "rationale": "Dedicated plot generation needed for AI-driven storytelling",
          "standards_reference": "UAF 1.2 Level 3 decomposition triggers - AI integration complexity",
          "best_practices_reference": "LLM-based content generation with theme validation",
          "trade_offs": "Generation latency balanced against narrative quality"
        }
      },
      "id": "plot_generator"
    }
  ],
  "links": [
    {
      "type": "dependency",
      "source": "story_engine",
      "target": "branch_manager"
    },
    {
      "type": "dependency",
      "source": "story_engine",
      "target": "plot_generator"
    },
    {
      "type": "dependency",
      "source": "plot_generator",
      "target": "story_engine"
    },
    {
      "type": "dependency",
      "source": "plot_generator",
      "target": "branch_manager"
    }
  ]
}