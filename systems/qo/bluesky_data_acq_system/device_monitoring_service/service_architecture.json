{
  "template_version": "1.0",
  "template_description": "Standard template for service_architecture.json files based on UAF definitions",
  "service_name": "Device Monitoring Service",
  "service_id": "device_monitoring_service",
  "hierarchical_tier": "tier_1_systems",
  "component_classification": "service",
  "purpose": "Provides real-time monitoring and control of EPICS/ophyd device status and process variables (PVs) to web and Python clients. Enables live device monitoring, status updates, and limited control operations.",
  "dependencies": [
    "ophyd_websocket",
    "epics_ca_interface",
    "web_client_hooks",
    "coordination_service"
  ],
  "interfaces": [
    {
      "name": "WebSocket Device Monitoring",
      "interface_type": "message",
      "communication_pattern": "bidirectional",
      "dependency_type": "direct",
      "description": "FastAPI-based WebSocket service for live device monitoring and control with JSON message protocol",
      "auth_required": false,
      "version": "1.0",
      "implementation_status": "existing",
      "source_verification": "Based on actual ophyd-websocket implementation"
    },
    {
      "name": "React Client Hooks",
      "interface_type": "service_dependency",
      "communication_pattern": "bidirectional",
      "dependency_type": "direct",
      "description": "React client hooks (useOphydSocket.ts) and supporting types for seamless integration into web UIs",
      "auth_required": false,
      "version": "1.0",
      "implementation_status": "existing",
      "source_verification": "Based on actual React hooks implementation"
    },
    {
      "name": "Python Client WebSocket",
      "interface_type": "service_dependency",
      "communication_pattern": "bidirectional",
      "dependency_type": "direct",
      "description": "Python client support for direct WebSocket interaction",
      "auth_required": false,
      "version": "1.0",
      "implementation_status": "existing",
      "source_verification": "Based on actual Python WebSocket client support"
    },
    {
      "name": "Coordination Service Interface",
      "interface_type": "service_dependency",
      "communication_pattern": "synchronous",
      "dependency_type": "direct",
      "description": "Interface with coordination service to check beamline locks before allowing device control",
      "auth_required": true,
      "version": "1.0",
      "implementation_status": "recommended",
      "source_verification": "Recommended solution - prevents device control during active scans"
    },
    {
      "name": "EPICS Channel Access",
      "interface_type": "service_dependency",
      "communication_pattern": "asynchronous",
      "dependency_type": "external",
      "description": "Direct EPICS/CA communication with IOCs for device monitoring and control",
      "auth_required": false,
      "version": "1.0",
      "implementation_status": "existing",
      "source_verification": "Based on actual ophyd/pyepics integration"
    }
  ],
  "is_external": false,
  "parent_system": "bluesky_data_acq_system",
  "security": {
    "api_key_authentication": false,
    "ssl_tls": false,
    "additional_requirements": [
      "Current version has no authentication - recommend adding for production deployments",
      "Consider adding SSL/TLS for production WebSocket connections"
    ]
  },
  "deployment": {
    "ansible_managed": false,
    "systemd_service": false,
    "python_uvicorn": true,
    "docker_container": false,
    "additional_info": {
      "startup_method": "Can be started with Python or Uvicorn",
      "requirements": "ophyd, pyepics, fastapi, uvicorn, numpy",
      "designed_for": "Easy deployment alongside other Bluesky services"
    }
  },
  "performance": {
    "expected_load": "high",
    "scaling_strategy": "horizontal",
    "resource_requirements": {
      "real_time_capability": "Live updates on value changes and device connection/disconnection",
      "multi_pv_subscription": "Clients can subscribe to any number of PVs in a single WebSocket session"
    }
  },
  "version": "1.0+2025-10-02",
  "source_references": {
    "github_repo": "",
    "documentation_links": [
      "https://github.com/bluesky/ophyd",
      "https://github.com/pyepics/pyepics"
    ],
    "analysis_date": "2025-10-02",
    "confidence_level": "high"
  },
  "implementation_status": "existing",
  "verification_notes": "Based on actual ophyd-websocket implementation with coordination service integration recommendations",
  "justification": {
    "rationale": "Provides real-time device monitoring capability essential for scientific instrument operation",
    "standards_reference": "WebSocket protocol for real-time bidirectional communication",
    "best_practices_reference": "Separation of monitoring from control enables independent scaling and safety",
    "examples": "Similar to industrial SCADA systems with real-time monitoring",
    "trade_offs": "Real-time capability vs. coordination complexity for safety"
  }
}